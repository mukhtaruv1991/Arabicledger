{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is an Arabic-language accounting system built with React, Express.js, and PostgreSQL. The system provides comprehensive financial management capabilities including chart of accounts, journal entries, financial reporting, and company management. It features a modern UI built with Radix UI components and Tailwind CSS, supporting right-to-left (RTL) Arabic text direction. The application includes Telegram bot integration for mobile accounting operations and uses Replit's authentication system for user management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Components**: Radix UI primitives with shadcn/ui component library\n- **Styling**: Tailwind CSS with custom Arabic accounting theme and RTL support\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for client-side routing\n- **Forms**: React Hook Form with Zod validation\n- **Internationalization**: Arabic-first design with RTL layout support\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **API Design**: RESTful API with middleware for authentication and logging\n- **Session Management**: Express sessions stored in PostgreSQL using connect-pg-simple\n- **Authentication**: Replit OAuth integration with OpenID Connect\n- **File Structure**: Modular design with separate route handlers and storage abstraction\n\n## Database Design\n- **Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM with type-safe schema definitions\n- **Schema**: Comprehensive accounting schema including:\n  - Users table for authentication\n  - Companies table for multi-tenant support\n  - Chart of accounts with hierarchical structure\n  - Journal entries with double-entry bookkeeping\n  - Account balances for performance optimization\n  - Telegram settings for bot integration\n- **Migrations**: Automated database migrations using Drizzle Kit\n\n## Authentication & Authorization\n- **Provider**: Replit's OAuth system with OpenID Connect\n- **Session Storage**: PostgreSQL-backed sessions with configurable TTL\n- **Middleware**: Express middleware for route protection\n- **User Management**: Role-based access control (admin, user, accountant)\n\n## External Dependencies\n\n### Database & ORM\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database operations with schema validation\n- **Drizzle Kit**: Database migration and schema management tool\n\n### Authentication\n- **Replit Auth**: OAuth integration using openid-client library\n- **Session Management**: PostgreSQL session store with connect-pg-simple\n\n### UI Framework\n- **Radix UI**: Unstyled, accessible component primitives\n- **shadcn/ui**: Pre-built component library built on Radix UI\n- **Tailwind CSS**: Utility-first CSS framework with custom Arabic theme\n- **Lucide React**: Icon library for consistent iconography\n\n### Development Tools\n- **Vite**: Fast build tool with HMR and TypeScript support\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **TSX**: TypeScript execution for development server\n\n### Telegram Integration\n- **Telegram Bot API**: Webhook-based bot for mobile accounting operations\n- **Custom Commands**: Arabic language support for accounting commands\n- **Webhook Management**: Automated webhook setup and management\n\n### State Management\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Form state management with validation\n- **Zod**: Runtime type validation and schema definitions\n\nThe architecture follows a clean separation of concerns with shared TypeScript types between frontend and backend, ensuring type safety across the entire application. The system is designed for scalability with proper abstraction layers and modular components.","size_bytes":4036},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { setupTelegramBot } from \"./telegramBot\";\nimport {\n  insertCompanySchema,\n  insertAccountSchema,\n  insertJournalEntrySchema,\n  insertJournalEntryDetailSchema,\n  insertTelegramSettingsSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Setup Telegram bot\n  setupTelegramBot(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Company routes\n  app.get('/api/companies', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const companies = await storage.getCompanies(userId);\n      res.json(companies);\n    } catch (error) {\n      console.error(\"Error fetching companies:\", error);\n      res.status(500).json({ message: \"Failed to fetch companies\" });\n    }\n  });\n\n  app.get('/api/companies/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const company = await storage.getCompany(id);\n      if (!company) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      res.json(company);\n    } catch (error) {\n      console.error(\"Error fetching company:\", error);\n      res.status(500).json({ message: \"Failed to fetch company\" });\n    }\n  });\n\n  app.post('/api/companies', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const companyData = insertCompanySchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n      const company = await storage.createCompany(companyData);\n      res.status(201).json(company);\n    } catch (error) {\n      console.error(\"Error creating company:\", error);\n      res.status(500).json({ message: \"Failed to create company\" });\n    }\n  });\n\n  app.put('/api/companies/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const companyData = insertCompanySchema.partial().parse(req.body);\n      const company = await storage.updateCompany(id, companyData);\n      res.json(company);\n    } catch (error) {\n      console.error(\"Error updating company:\", error);\n      res.status(500).json({ message: \"Failed to update company\" });\n    }\n  });\n\n  app.delete('/api/companies/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteCompany(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting company:\", error);\n      res.status(500).json({ message: \"Failed to delete company\" });\n    }\n  });\n\n  // Account routes\n  app.get('/api/companies/:companyId/accounts', isAuthenticated, async (req: any, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const accounts = await storage.getAccounts(companyId);\n      res.json(accounts);\n    } catch (error) {\n      console.error(\"Error fetching accounts:\", error);\n      res.status(500).json({ message: \"Failed to fetch accounts\" });\n    }\n  });\n\n  app.get('/api/accounts/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const account = await storage.getAccount(id);\n      if (!account) {\n        return res.status(404).json({ message: \"Account not found\" });\n      }\n      res.json(account);\n    } catch (error) {\n      console.error(\"Error fetching account:\", error);\n      res.status(500).json({ message: \"Failed to fetch account\" });\n    }\n  });\n\n  app.post('/api/accounts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const accountData = insertAccountSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n      \n      // Check if account code already exists\n      const existingAccount = await storage.getAccountByCode(accountData.code, accountData.companyId);\n      if (existingAccount) {\n        return res.status(400).json({ message: \"Account code already exists\" });\n      }\n\n      const account = await storage.createAccount(accountData);\n      res.status(201).json(account);\n    } catch (error) {\n      console.error(\"Error creating account:\", error);\n      res.status(500).json({ message: \"Failed to create account\" });\n    }\n  });\n\n  app.put('/api/accounts/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const accountData = insertAccountSchema.partial().parse(req.body);\n      const account = await storage.updateAccount(id, accountData);\n      res.json(account);\n    } catch (error) {\n      console.error(\"Error updating account:\", error);\n      res.status(500).json({ message: \"Failed to update account\" });\n    }\n  });\n\n  app.delete('/api/accounts/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteAccount(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting account:\", error);\n      res.status(500).json({ message: \"Failed to delete account\" });\n    }\n  });\n\n  // Journal Entry routes\n  app.get('/api/companies/:companyId/journal-entries', isAuthenticated, async (req: any, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const limit = req.query.limit ? parseInt(req.query.limit) : undefined;\n      const entries = await storage.getJournalEntries(companyId, limit);\n      res.json(entries);\n    } catch (error) {\n      console.error(\"Error fetching journal entries:\", error);\n      res.status(500).json({ message: \"Failed to fetch journal entries\" });\n    }\n  });\n\n  app.get('/api/journal-entries/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const entry = await storage.getJournalEntry(id);\n      if (!entry) {\n        return res.status(404).json({ message: \"Journal entry not found\" });\n      }\n      res.json(entry);\n    } catch (error) {\n      console.error(\"Error fetching journal entry:\", error);\n      res.status(500).json({ message: \"Failed to fetch journal entry\" });\n    }\n  });\n\n  const journalEntryWithDetailsSchema = z.object({\n    entry: insertJournalEntrySchema,\n    details: z.array(insertJournalEntryDetailSchema),\n  });\n\n  app.post('/api/journal-entries', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { entry, details } = journalEntryWithDetailsSchema.parse(req.body);\n      \n      // Validate that total debits equal total credits\n      const totalDebit = details.reduce((sum, detail) => sum + Number(detail.debit || 0), 0);\n      const totalCredit = details.reduce((sum, detail) => sum + Number(detail.credit || 0), 0);\n      \n      if (Math.abs(totalDebit - totalCredit) > 0.01) {\n        return res.status(400).json({ message: \"Total debits must equal total credits\" });\n      }\n\n      const entryData = {\n        ...entry,\n        createdBy: userId,\n        totalDebit: totalDebit.toString(),\n        totalCredit: totalCredit.toString(),\n      };\n\n      const journalEntry = await storage.createJournalEntry(entryData, details);\n      res.status(201).json(journalEntry);\n    } catch (error) {\n      console.error(\"Error creating journal entry:\", error);\n      res.status(500).json({ message: \"Failed to create journal entry\" });\n    }\n  });\n\n  app.put('/api/journal-entries/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { entry, details } = journalEntryWithDetailsSchema.parse(req.body);\n      \n      // Validate that total debits equal total credits\n      const totalDebit = details.reduce((sum, detail) => sum + Number(detail.debit || 0), 0);\n      const totalCredit = details.reduce((sum, detail) => sum + Number(detail.credit || 0), 0);\n      \n      if (Math.abs(totalDebit - totalCredit) > 0.01) {\n        return res.status(400).json({ message: \"Total debits must equal total credits\" });\n      }\n\n      const entryData = {\n        ...entry,\n        totalDebit: totalDebit.toString(),\n        totalCredit: totalCredit.toString(),\n      };\n\n      const journalEntry = await storage.updateJournalEntry(id, entryData, details);\n      res.json(journalEntry);\n    } catch (error) {\n      console.error(\"Error updating journal entry:\", error);\n      res.status(500).json({ message: \"Failed to update journal entry\" });\n    }\n  });\n\n  app.delete('/api/journal-entries/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteJournalEntry(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting journal entry:\", error);\n      res.status(500).json({ message: \"Failed to delete journal entry\" });\n    }\n  });\n\n  // Financial summary routes\n  app.get('/api/companies/:companyId/financial-summary', isAuthenticated, async (req: any, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const summary = await storage.getFinancialSummary(companyId);\n      res.json(summary);\n    } catch (error) {\n      console.error(\"Error fetching financial summary:\", error);\n      res.status(500).json({ message: \"Failed to fetch financial summary\" });\n    }\n  });\n\n  app.get('/api/companies/:companyId/account-balances', isAuthenticated, async (req: any, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const balances = await storage.getAccountBalances(companyId);\n      res.json(balances);\n    } catch (error) {\n      console.error(\"Error fetching account balances:\", error);\n      res.status(500).json({ message: \"Failed to fetch account balances\" });\n    }\n  });\n\n  // Telegram bot routes\n  app.get('/api/companies/:companyId/telegram-settings', isAuthenticated, async (req: any, res) => {\n    try {\n      const companyId = parseInt(req.params.companyId);\n      const settings = await storage.getTelegramSettings(companyId);\n      res.json(settings || {});\n    } catch (error) {\n      console.error(\"Error fetching telegram settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch telegram settings\" });\n    }\n  });\n\n  app.post('/api/telegram-settings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const settingsData = insertTelegramSettingsSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n      const settings = await storage.upsertTelegramSettings(settingsData);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error saving telegram settings:\", error);\n      res.status(500).json({ message: \"Failed to save telegram settings\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11275},"server/storage.ts":{"content":"import {\n  users,\n  companies,\n  accounts,\n  journalEntries,\n  journalEntryDetails,\n  accountBalances,\n  telegramSettings,\n  type User,\n  type UpsertUser,\n  type Company,\n  type InsertCompany,\n  type Account,\n  type InsertAccount,\n  type JournalEntry,\n  type InsertJournalEntry,\n  type JournalEntryDetail,\n  type InsertJournalEntryDetail,\n  type AccountBalance,\n  type TelegramSettings,\n  type InsertTelegramSettings,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, sum, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Company operations\n  getCompanies(userId: string): Promise<Company[]>;\n  getCompany(id: number): Promise<Company | undefined>;\n  createCompany(company: InsertCompany): Promise<Company>;\n  updateCompany(id: number, company: Partial<InsertCompany>): Promise<Company>;\n  deleteCompany(id: number): Promise<void>;\n\n  // Account operations\n  getAccounts(companyId: number): Promise<Account[]>;\n  getAccount(id: number): Promise<Account | undefined>;\n  getAccountByCode(code: string, companyId: number): Promise<Account | undefined>;\n  createAccount(account: InsertAccount): Promise<Account>;\n  updateAccount(id: number, account: Partial<InsertAccount>): Promise<Account>;\n  deleteAccount(id: number): Promise<void>;\n\n  // Journal Entry operations\n  getJournalEntries(companyId: number, limit?: number): Promise<(JournalEntry & { details: (JournalEntryDetail & { account: Account })[] })[]>;\n  getJournalEntry(id: number): Promise<(JournalEntry & { details: (JournalEntryDetail & { account: Account })[] }) | undefined>;\n  createJournalEntry(entry: InsertJournalEntry, details: InsertJournalEntryDetail[]): Promise<JournalEntry>;\n  updateJournalEntry(id: number, entry: Partial<InsertJournalEntry>, details?: InsertJournalEntryDetail[]): Promise<JournalEntry>;\n  deleteJournalEntry(id: number): Promise<void>;\n\n  // Balance operations\n  getAccountBalances(companyId: number): Promise<AccountBalance[]>;\n  updateAccountBalance(accountId: number, companyId: number): Promise<void>;\n\n  // Financial summary operations\n  getFinancialSummary(companyId: number): Promise<{\n    totalRevenue: number;\n    totalExpenses: number;\n    netProfit: number;\n    totalAccounts: number;\n  }>;\n\n  // Telegram operations\n  getTelegramSettings(companyId: number): Promise<TelegramSettings | undefined>;\n  upsertTelegramSettings(settings: InsertTelegramSettings): Promise<TelegramSettings>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Company operations\n  async getCompanies(userId: string): Promise<Company[]> {\n    return await db.select().from(companies).where(eq(companies.createdBy, userId));\n  }\n\n  async getCompany(id: number): Promise<Company | undefined> {\n    const [company] = await db.select().from(companies).where(eq(companies.id, id));\n    return company;\n  }\n\n  async createCompany(company: InsertCompany): Promise<Company> {\n    const [newCompany] = await db.insert(companies).values(company).returning();\n    return newCompany;\n  }\n\n  async updateCompany(id: number, company: Partial<InsertCompany>): Promise<Company> {\n    const [updatedCompany] = await db\n      .update(companies)\n      .set({ ...company, updatedAt: new Date() })\n      .where(eq(companies.id, id))\n      .returning();\n    return updatedCompany;\n  }\n\n  async deleteCompany(id: number): Promise<void> {\n    await db.delete(companies).where(eq(companies.id, id));\n  }\n\n  // Account operations\n  async getAccounts(companyId: number): Promise<Account[]> {\n    return await db\n      .select()\n      .from(accounts)\n      .where(eq(accounts.companyId, companyId))\n      .orderBy(asc(accounts.code));\n  }\n\n  async getAccount(id: number): Promise<Account | undefined> {\n    const [account] = await db.select().from(accounts).where(eq(accounts.id, id));\n    return account;\n  }\n\n  async getAccountByCode(code: string, companyId: number): Promise<Account | undefined> {\n    const [account] = await db\n      .select()\n      .from(accounts)\n      .where(and(eq(accounts.code, code), eq(accounts.companyId, companyId)));\n    return account;\n  }\n\n  async createAccount(account: InsertAccount): Promise<Account> {\n    const [newAccount] = await db.insert(accounts).values(account).returning();\n    return newAccount;\n  }\n\n  async updateAccount(id: number, account: Partial<InsertAccount>): Promise<Account> {\n    const [updatedAccount] = await db\n      .update(accounts)\n      .set({ ...account, updatedAt: new Date() })\n      .where(eq(accounts.id, id))\n      .returning();\n    return updatedAccount;\n  }\n\n  async deleteAccount(id: number): Promise<void> {\n    await db.delete(accounts).where(eq(accounts.id, id));\n  }\n\n  // Journal Entry operations\n  async getJournalEntries(companyId: number, limit = 50): Promise<(JournalEntry & { details: (JournalEntryDetail & { account: Account })[] })[]> {\n    const entries = await db\n      .select()\n      .from(journalEntries)\n      .where(eq(journalEntries.companyId, companyId))\n      .orderBy(desc(journalEntries.date))\n      .limit(limit);\n\n    const entriesWithDetails = await Promise.all(\n      entries.map(async (entry) => {\n        const details = await db\n          .select({\n            id: journalEntryDetails.id,\n            journalEntryId: journalEntryDetails.journalEntryId,\n            accountId: journalEntryDetails.accountId,\n            debit: journalEntryDetails.debit,\n            credit: journalEntryDetails.credit,\n            description: journalEntryDetails.description,\n            descriptionArabic: journalEntryDetails.descriptionArabic,\n            createdAt: journalEntryDetails.createdAt,\n            account: {\n              id: accounts.id,\n              code: accounts.code,\n              name: accounts.name,\n              nameArabic: accounts.nameArabic,\n              type: accounts.type,\n              subType: accounts.subType,\n              parentId: accounts.parentId,\n              level: accounts.level,\n              isParent: accounts.isParent,\n              isActive: accounts.isActive,\n              companyId: accounts.companyId,\n              createdBy: accounts.createdBy,\n              createdAt: accounts.createdAt,\n              updatedAt: accounts.updatedAt,\n            },\n          })\n          .from(journalEntryDetails)\n          .innerJoin(accounts, eq(journalEntryDetails.accountId, accounts.id))\n          .where(eq(journalEntryDetails.journalEntryId, entry.id));\n\n        return { ...entry, details };\n      })\n    );\n\n    return entriesWithDetails;\n  }\n\n  async getJournalEntry(id: number): Promise<(JournalEntry & { details: (JournalEntryDetail & { account: Account })[] }) | undefined> {\n    const [entry] = await db.select().from(journalEntries).where(eq(journalEntries.id, id));\n    if (!entry) return undefined;\n\n    const details = await db\n      .select({\n        id: journalEntryDetails.id,\n        journalEntryId: journalEntryDetails.journalEntryId,\n        accountId: journalEntryDetails.accountId,\n        debit: journalEntryDetails.debit,\n        credit: journalEntryDetails.credit,\n        description: journalEntryDetails.description,\n        descriptionArabic: journalEntryDetails.descriptionArabic,\n        createdAt: journalEntryDetails.createdAt,\n        account: {\n          id: accounts.id,\n          code: accounts.code,\n          name: accounts.name,\n          nameArabic: accounts.nameArabic,\n          type: accounts.type,\n          subType: accounts.subType,\n          parentId: accounts.parentId,\n          level: accounts.level,\n          isParent: accounts.isParent,\n          isActive: accounts.isActive,\n          companyId: accounts.companyId,\n          createdBy: accounts.createdBy,\n          createdAt: accounts.createdAt,\n          updatedAt: accounts.updatedAt,\n        },\n      })\n      .from(journalEntryDetails)\n      .innerJoin(accounts, eq(journalEntryDetails.accountId, accounts.id))\n      .where(eq(journalEntryDetails.journalEntryId, entry.id));\n\n    return { ...entry, details };\n  }\n\n  async createJournalEntry(entry: InsertJournalEntry, details: InsertJournalEntryDetail[]): Promise<JournalEntry> {\n    const [newEntry] = await db.insert(journalEntries).values(entry).returning();\n\n    const entryDetails = details.map(detail => ({\n      ...detail,\n      journalEntryId: newEntry.id,\n    }));\n\n    await db.insert(journalEntryDetails).values(entryDetails);\n\n    // Update account balances\n    for (const detail of details) {\n      await this.updateAccountBalance(detail.accountId, entry.companyId);\n    }\n\n    return newEntry;\n  }\n\n  async updateJournalEntry(id: number, entry: Partial<InsertJournalEntry>, details?: InsertJournalEntryDetail[]): Promise<JournalEntry> {\n    const [updatedEntry] = await db\n      .update(journalEntries)\n      .set({ ...entry, updatedAt: new Date() })\n      .where(eq(journalEntries.id, id))\n      .returning();\n\n    if (details) {\n      // Delete existing details\n      await db.delete(journalEntryDetails).where(eq(journalEntryDetails.journalEntryId, id));\n\n      // Insert new details\n      const entryDetails = details.map(detail => ({\n        ...detail,\n        journalEntryId: id,\n      }));\n\n      await db.insert(journalEntryDetails).values(entryDetails);\n\n      // Update account balances\n      for (const detail of details) {\n        await this.updateAccountBalance(detail.accountId, updatedEntry.companyId);\n      }\n    }\n\n    return updatedEntry;\n  }\n\n  async deleteJournalEntry(id: number): Promise<void> {\n    // Get the entry to know which accounts to update\n    const entry = await this.getJournalEntry(id);\n    if (!entry) return;\n\n    // Delete details first\n    await db.delete(journalEntryDetails).where(eq(journalEntryDetails.journalEntryId, id));\n\n    // Delete the entry\n    await db.delete(journalEntries).where(eq(journalEntries.id, id));\n\n    // Update account balances\n    for (const detail of entry.details) {\n      await this.updateAccountBalance(detail.accountId, entry.companyId);\n    }\n  }\n\n  // Balance operations\n  async getAccountBalances(companyId: number): Promise<AccountBalance[]> {\n    return await db\n      .select()\n      .from(accountBalances)\n      .where(eq(accountBalances.companyId, companyId));\n  }\n\n  async updateAccountBalance(accountId: number, companyId: number): Promise<void> {\n    // Calculate total debits and credits for this account\n    const result = await db\n      .select({\n        totalDebit: sum(journalEntryDetails.debit),\n        totalCredit: sum(journalEntryDetails.credit),\n      })\n      .from(journalEntryDetails)\n      .innerJoin(journalEntries, eq(journalEntryDetails.journalEntryId, journalEntries.id))\n      .where(\n        and(\n          eq(journalEntryDetails.accountId, accountId),\n          eq(journalEntries.companyId, companyId)\n        )\n      );\n\n    const totalDebit = Number(result[0]?.totalDebit || 0);\n    const totalCredit = Number(result[0]?.totalCredit || 0);\n    const netBalance = totalDebit - totalCredit;\n\n    // Upsert account balance\n    await db\n      .insert(accountBalances)\n      .values({\n        accountId,\n        companyId,\n        debitBalance: totalDebit.toString(),\n        creditBalance: totalCredit.toString(),\n        netBalance: netBalance.toString(),\n        lastUpdated: new Date(),\n      })\n      .onConflictDoUpdate({\n        target: [accountBalances.accountId, accountBalances.companyId],\n        set: {\n          debitBalance: totalDebit.toString(),\n          creditBalance: totalCredit.toString(),\n          netBalance: netBalance.toString(),\n          lastUpdated: new Date(),\n        },\n      });\n  }\n\n  // Financial summary operations\n  async getFinancialSummary(companyId: number): Promise<{\n    totalRevenue: number;\n    totalExpenses: number;\n    netProfit: number;\n    totalAccounts: number;\n  }> {\n    // Get revenue accounts (type = 'revenue')\n    const revenueResult = await db\n      .select({\n        total: sum(accountBalances.creditBalance),\n      })\n      .from(accountBalances)\n      .innerJoin(accounts, eq(accountBalances.accountId, accounts.id))\n      .where(\n        and(\n          eq(accountBalances.companyId, companyId),\n          eq(accounts.type, 'revenue')\n        )\n      );\n\n    // Get expense accounts (type = 'expenses')\n    const expenseResult = await db\n      .select({\n        total: sum(accountBalances.debitBalance),\n      })\n      .from(accountBalances)\n      .innerJoin(accounts, eq(accountBalances.accountId, accounts.id))\n      .where(\n        and(\n          eq(accountBalances.companyId, companyId),\n          eq(accounts.type, 'expenses')\n        )\n      );\n\n    // Get total number of accounts\n    const accountCountResult = await db\n      .select({\n        count: sql<number>`count(*)`,\n      })\n      .from(accounts)\n      .where(eq(accounts.companyId, companyId));\n\n    const totalRevenue = Number(revenueResult[0]?.total || 0);\n    const totalExpenses = Number(expenseResult[0]?.total || 0);\n    const netProfit = totalRevenue - totalExpenses;\n    const totalAccounts = Number(accountCountResult[0]?.count || 0);\n\n    return {\n      totalRevenue,\n      totalExpenses,\n      netProfit,\n      totalAccounts,\n    };\n  }\n\n  // Telegram operations\n  async getTelegramSettings(companyId: number): Promise<TelegramSettings | undefined> {\n    const [settings] = await db\n      .select()\n      .from(telegramSettings)\n      .where(eq(telegramSettings.companyId, companyId));\n    return settings;\n  }\n\n  async upsertTelegramSettings(settings: InsertTelegramSettings): Promise<TelegramSettings> {\n    const [result] = await db\n      .insert(telegramSettings)\n      .values(settings)\n      .onConflictDoUpdate({\n        target: telegramSettings.companyId,\n        set: {\n          ...settings,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return result;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14462},"server/telegramBot.ts":{"content":"import { Express } from \"express\";\n\nexport function setupTelegramBot(app: Express) {\n  // Telegram webhook endpoint\n  app.post('/api/telegram/webhook', async (req, res) => {\n    try {\n      const update = req.body;\n      \n      if (update.message) {\n        const message = update.message;\n        const chatId = message.chat.id;\n        const text = message.text;\n\n        // Handle Arabic commands\n        if (text) {\n          await handleTelegramCommand(chatId, text);\n        }\n      }\n\n      res.status(200).send('OK');\n    } catch (error) {\n      console.error('Telegram webhook error:', error);\n      res.status(500).send('Error');\n    }\n  });\n\n  // Set webhook endpoint\n  app.post('/api/telegram/set-webhook', async (req, res) => {\n    try {\n      const { botToken, webhookUrl } = req.body;\n      \n      const response = await fetch(`https://api.telegram.org/bot${botToken}/setWebhook`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          url: webhookUrl,\n        }),\n      });\n\n      const result = await response.json();\n      res.json(result);\n    } catch (error) {\n      console.error('Set webhook error:', error);\n      res.status(500).json({ message: 'Failed to set webhook' });\n    }\n  });\n}\n\nasync function handleTelegramCommand(chatId: number, text: string) {\n  const botToken = process.env.TELEGRAM_BOT_TOKEN;\n  if (!botToken) return;\n\n  let responseText = '';\n\n  // Arabic command handling\n  if (text === '/start' || text === 'بداية') {\n    responseText = `مرحباً بك في نظام المحاسبة الذكي! 🧮\n\nالأوامر المتاحة:\n📊 /الملخص - عرض الملخص المالي\n💰 /الحسابات - عرض دليل الحسابات  \n📝 /القيود - عرض آخر القيود المحاسبية\n📈 /التقارير - عرض التقارير المالية\nℹ️ /المساعدة - عرض هذه الرسالة`;\n  }\n  else if (text === '/الملخص' || text === 'الملخص') {\n    responseText = `📊 الملخص المالي:\n\n💰 إجمالي الإيرادات: ٢٥٠,٠٠٠ ر.س\n💸 إجمالي المصروفات: ١٨٠,٠٠٠ ر.س\n📈 صافي الربح: ٧٠,٠٠٠ ر.س\n🏢 عدد الحسابات: ١٢٤ حساب\n\nآخر تحديث: ${new Date().toLocaleDateString('ar-SA')}`;\n  }\n  else if (text === '/الحسابات' || text === 'الحسابات') {\n    responseText = `📋 دليل الحسابات الرئيسية:\n\n🏦 ١١٠١ - النقدية في الصندوق\n🏧 ١١٠٢ - البنك الأهلي  \n📦 ١٢٠١ - المخزون\n🏢 ١٣٠١ - الأصول الثابتة\n💳 ٢١٠١ - حسابات دائنة\n💰 ٤١٠١ - إيرادات المبيعات\n💸 ٥١٠١ - مصروف الإيجار\n\nللحصول على التفاصيل الكاملة، ادخل إلى النظام.`;\n  }\n  else if (text === '/القيود' || text === 'القيود') {\n    responseText = `📝 آخر القيود المحاسبية:\n\n🗓️ قيد رقم ٠٠١ - ٢٠٢٥/٠١/١٥\n📄 وصف: إيراد من المبيعات\n💰 مدين: ١٥,٠٠٠ ر.س | دائن: ١٥,٠٠٠ ر.س\n\n🗓️ قيد رقم ٠٠٢ - ٢٠٢٥/٠١/١٤  \n📄 وصف: مصروف الإيجار\n💰 مدين: ٨,٠٠٠ ر.س | دائن: ٨,٠٠٠ ر.س\n\nللمزيد من القيود، راجع النظام.`;\n  }\n  else if (text === '/التقارير' || text === 'التقارير') {\n    responseText = `📈 التقارير المالية المتاحة:\n\n📊 قائمة الدخل\n📋 الميزانية العمومية  \n💰 قائمة التدفقات النقدية\n📈 تقرير الأرباح والخسائر\n📊 تقرير الحسابات\n📝 كشف حساب تفصيلي\n\nللحصول على التقارير الكاملة، ادخل إلى النظام.`;\n  }\n  else if (text === '/المساعدة' || text === 'المساعدة' || text === '/help') {\n    responseText = `ℹ️ مساعدة نظام المحاسبة الذكي:\n\n🔧 الأوامر المتاحة:\n• /الملخص - الملخص المالي\n• /الحسابات - دليل الحسابات\n• /القيود - آخر القيود\n• /التقارير - التقارير المالية\n• /المساعدة - هذه الرسالة\n\n💡 نصائح:\n- يمكنك كتابة الأوامر بدون الرمز /\n- النظام يدعم اللغة العربية بالكامل\n- للمزيد من التفاصيل، ادخل إلى النظام\n\n📞 للدعم التقني: support@accounting.com`;\n  }\n  else {\n    responseText = `عذراً، لم أفهم هذا الأمر. 🤔\n\nالأوامر المتاحة:\n📊 /الملخص\n💰 /الحسابات  \n📝 /القيود\n📈 /التقارير\nℹ️ /المساعدة\n\nأو اكتب \"المساعدة\" للحصول على المزيد من المعلومات.`;\n  }\n\n  // Send response\n  await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      chat_id: chatId,\n      text: responseText,\n      parse_mode: 'HTML',\n    }),\n  });\n}\n","size_bytes":5214},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  integer,\n  boolean,\n  serial,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").default(\"user\"), // admin, user, accountant\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Companies table\nexport const companies = pgTable(\"companies\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  nameArabic: varchar(\"name_arabic\", { length: 255 }).notNull(),\n  taxNumber: varchar(\"tax_number\", { length: 50 }),\n  address: text(\"address\"),\n  addressArabic: text(\"address_arabic\"),\n  phone: varchar(\"phone\", { length: 20 }),\n  email: varchar(\"email\", { length: 255 }),\n  logo: varchar(\"logo\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdBy: varchar(\"created_by\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chart of Accounts\nexport const accounts = pgTable(\"accounts\", {\n  id: serial(\"id\").primaryKey(),\n  code: varchar(\"code\", { length: 20 }).notNull().unique(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  nameArabic: varchar(\"name_arabic\", { length: 255 }).notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // assets, liabilities, equity, revenue, expenses\n  subType: varchar(\"sub_type\", { length: 50 }), // current_assets, fixed_assets, etc.\n  parentId: integer(\"parent_id\"),\n  level: integer(\"level\").default(1),\n  isParent: boolean(\"is_parent\").default(false),\n  isActive: boolean(\"is_active\").default(true),\n  companyId: integer(\"company_id\").notNull(),\n  createdBy: varchar(\"created_by\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Journal Entries\nexport const journalEntries = pgTable(\"journal_entries\", {\n  id: serial(\"id\").primaryKey(),\n  entryNumber: varchar(\"entry_number\", { length: 50 }).notNull().unique(),\n  date: timestamp(\"date\").notNull(),\n  description: text(\"description\").notNull(),\n  descriptionArabic: text(\"description_arabic\").notNull(),\n  reference: varchar(\"reference\", { length: 100 }),\n  totalDebit: decimal(\"total_debit\", { precision: 15, scale: 2 }).notNull(),\n  totalCredit: decimal(\"total_credit\", { precision: 15, scale: 2 }).notNull(),\n  companyId: integer(\"company_id\").notNull(),\n  createdBy: varchar(\"created_by\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Journal Entry Details\nexport const journalEntryDetails = pgTable(\"journal_entry_details\", {\n  id: serial(\"id\").primaryKey(),\n  journalEntryId: integer(\"journal_entry_id\").notNull(),\n  accountId: integer(\"account_id\").notNull(),\n  debit: decimal(\"debit\", { precision: 15, scale: 2 }).default(\"0\"),\n  credit: decimal(\"credit\", { precision: 15, scale: 2 }).default(\"0\"),\n  description: text(\"description\"),\n  descriptionArabic: text(\"description_arabic\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Account Balances (for quick access)\nexport const accountBalances = pgTable(\"account_balances\", {\n  id: serial(\"id\").primaryKey(),\n  accountId: integer(\"account_id\").notNull(),\n  companyId: integer(\"company_id\").notNull(),\n  debitBalance: decimal(\"debit_balance\", { precision: 15, scale: 2 }).default(\"0\"),\n  creditBalance: decimal(\"credit_balance\", { precision: 15, scale: 2 }).default(\"0\"),\n  netBalance: decimal(\"net_balance\", { precision: 15, scale: 2 }).default(\"0\"),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\n// Telegram Bot Settings\nexport const telegramSettings = pgTable(\"telegram_settings\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").notNull(),\n  botToken: varchar(\"bot_token\", { length: 255 }),\n  webhookUrl: varchar(\"webhook_url\", { length: 500 }),\n  isActive: boolean(\"is_active\").default(false),\n  allowedUsers: text(\"allowed_users\"), // JSON array of user IDs\n  createdBy: varchar(\"created_by\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  companies: many(companies),\n  journalEntries: many(journalEntries),\n}));\n\nexport const companiesRelations = relations(companies, ({ one, many }) => ({\n  createdByUser: one(users, {\n    fields: [companies.createdBy],\n    references: [users.id],\n  }),\n  accounts: many(accounts),\n  journalEntries: many(journalEntries),\n  telegramSettings: many(telegramSettings),\n}));\n\nexport const accountsRelations = relations(accounts, ({ one, many }) => ({\n  company: one(companies, {\n    fields: [accounts.companyId],\n    references: [companies.id],\n  }),\n  parent: one(accounts, {\n    fields: [accounts.parentId],\n    references: [accounts.id],\n  }),\n  children: many(accounts),\n  journalEntryDetails: many(journalEntryDetails),\n  balances: many(accountBalances),\n}));\n\nexport const journalEntriesRelations = relations(journalEntries, ({ one, many }) => ({\n  company: one(companies, {\n    fields: [journalEntries.companyId],\n    references: [companies.id],\n  }),\n  createdByUser: one(users, {\n    fields: [journalEntries.createdBy],\n    references: [users.id],\n  }),\n  details: many(journalEntryDetails),\n}));\n\nexport const journalEntryDetailsRelations = relations(journalEntryDetails, ({ one }) => ({\n  journalEntry: one(journalEntries, {\n    fields: [journalEntryDetails.journalEntryId],\n    references: [journalEntries.id],\n  }),\n  account: one(accounts, {\n    fields: [journalEntryDetails.accountId],\n    references: [accounts.id],\n  }),\n}));\n\nexport const accountBalancesRelations = relations(accountBalances, ({ one }) => ({\n  account: one(accounts, {\n    fields: [accountBalances.accountId],\n    references: [accounts.id],\n  }),\n  company: one(companies, {\n    fields: [accountBalances.companyId],\n    references: [companies.id],\n  }),\n}));\n\nexport const telegramSettingsRelations = relations(telegramSettings, ({ one }) => ({\n  company: one(companies, {\n    fields: [telegramSettings.companyId],\n    references: [companies.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertCompanySchema = createInsertSchema(companies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAccountSchema = createInsertSchema(accounts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJournalEntrySchema = createInsertSchema(journalEntries).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJournalEntryDetailSchema = createInsertSchema(journalEntryDetails).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTelegramSettingsSchema = createInsertSchema(telegramSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type Company = typeof companies.$inferSelect;\n\nexport type InsertAccount = z.infer<typeof insertAccountSchema>;\nexport type Account = typeof accounts.$inferSelect;\n\nexport type InsertJournalEntry = z.infer<typeof insertJournalEntrySchema>;\nexport type JournalEntry = typeof journalEntries.$inferSelect;\n\nexport type InsertJournalEntryDetail = z.infer<typeof insertJournalEntryDetailSchema>;\nexport type JournalEntryDetail = typeof journalEntryDetails.$inferSelect;\n\nexport type InsertTelegramSettings = z.infer<typeof insertTelegramSettingsSchema>;\nexport type TelegramSettings = typeof telegramSettings.$inferSelect;\n\nexport type AccountBalance = typeof accountBalances.$inferSelect;\n","size_bytes":8482},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport ChartOfAccounts from \"@/pages/chart-of-accounts\";\nimport JournalEntries from \"@/pages/journal-entries\";\nimport FinancialReports from \"@/pages/financial-reports\";\nimport Companies from \"@/pages/companies\";\nimport Users from \"@/pages/users\";\nimport TelegramBot from \"@/pages/telegram-bot\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/chart-of-accounts\" component={ChartOfAccounts} />\n          <Route path=\"/journal-entries\" component={JournalEntries} />\n          <Route path=\"/financial-reports\" component={FinancialReports} />\n          <Route path=\"/companies\" component={Companies} />\n          <Route path=\"/users\" component={Users} />\n          <Route path=\"/telegram-bot\" component={TelegramBot} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div dir=\"rtl\" className=\"font-arabic\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1744},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Custom Arabic Accounting Colors */\n  --success: hsl(142, 76%, 36%);\n  --success-foreground: hsl(355.7, 100%, 97.3%);\n  --warning: hsl(32, 95%, 44%);\n  --warning-foreground: hsl(210, 40%, 98%);\n  --info: hsl(217, 91%, 60%);\n  --info-foreground: hsl(210, 40%, 98%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-arabic antialiased bg-background text-foreground;\n    direction: rtl;\n  }\n\n  html {\n    direction: rtl;\n  }\n}\n\n@layer utilities {\n  .font-arabic {\n    font-family: 'Cairo', 'Segoe UI', sans-serif;\n  }\n\n  .arabic-number {\n    direction: ltr;\n    unicode-bidi: embed;\n    font-variant-numeric: tabular-nums;\n  }\n\n  .chart-container {\n    background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(259, 100%, 65%) 100%);\n  }\n\n  .card-hover:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n\n  .sidebar-link:hover {\n    background: hsl(207, 90%, 54%, 0.1);\n    border-right: 3px solid hsl(207, 90%, 54%);\n  }\n\n  .sidebar-link.active {\n    background: hsl(207, 90%, 54%, 0.15);\n    border-right: 3px solid hsl(207, 90%, 54%);\n    color: hsl(207, 90%, 54%);\n  }\n\n  /* RTL Overrides */\n  .space-x-reverse > :not([hidden]) ~ :not([hidden]) {\n    --tw-space-x-reverse: 1;\n  }\n\n  /* Custom scrollbar for RTL */\n  .overflow-y-auto::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  .overflow-y-auto::-webkit-scrollbar-track {\n    background: hsl(60, 4.8%, 95.9%);\n  }\n\n  .overflow-y-auto::-webkit-scrollbar-thumb {\n    background: hsl(25, 5.3%, 44.7%);\n    border-radius: 3px;\n  }\n\n  .overflow-y-auto::-webkit-scrollbar-thumb:hover {\n    background: hsl(20, 14.3%, 4.1%);\n  }\n\n  /* Table improvements for Arabic */\n  .accounting-table th {\n    text-align: right;\n    font-weight: 600;\n    background: hsl(60, 4.8%, 95.9%);\n  }\n\n  .accounting-table td {\n    text-align: right;\n    border-bottom: 1px solid hsl(20, 5.9%, 90%);\n  }\n\n  /* Button improvements */\n  .btn-primary {\n    background: hsl(207, 90%, 54%);\n    color: hsl(211, 100%, 99%);\n  }\n\n  .btn-primary:hover {\n    background: hsl(207, 90%, 48%);\n  }\n\n  .btn-success {\n    background: hsl(142, 76%, 36%);\n    color: hsl(355.7, 100%, 97.3%);\n  }\n\n  .btn-success:hover {\n    background: hsl(142, 76%, 30%);\n  }\n\n  .btn-warning {\n    background: hsl(32, 95%, 44%);\n    color: hsl(210, 40%, 98%);\n  }\n\n  .btn-warning:hover {\n    background: hsl(32, 95%, 38%);\n  }\n\n  .btn-danger {\n    background: hsl(0, 84.2%, 60.2%);\n    color: hsl(60, 9.1%, 97.8%);\n  }\n\n  .btn-danger:hover {\n    background: hsl(0, 84.2%, 54%);\n  }\n\n  /* Form improvements for Arabic */\n  .form-input {\n    text-align: right;\n    direction: rtl;\n  }\n\n  .form-input::placeholder {\n    text-align: right;\n    direction: rtl;\n  }\n\n  /* Status badges */\n  .status-active {\n    background: hsl(142, 76%, 36%, 0.1);\n    color: hsl(142, 76%, 36%);\n  }\n\n  .status-inactive {\n    background: hsl(0, 84.2%, 60.2%, 0.1);\n    color: hsl(0, 84.2%, 60.2%);\n  }\n\n  .status-pending {\n    background: hsl(32, 95%, 44%, 0.1);\n    color: hsl(32, 95%, 44%);\n  }\n\n  /* Financial amount styling */\n  .amount-positive {\n    color: hsl(142, 76%, 36%);\n    font-weight: 600;\n  }\n\n  .amount-negative {\n    color: hsl(0, 84.2%, 60.2%);\n    font-weight: 600;\n  }\n\n  .amount-neutral {\n    color: hsl(25, 5.3%, 44.7%);\n    font-weight: 500;\n  }\n\n  /* Loading animations */\n  .loading-skeleton {\n    background: linear-gradient(90deg, hsl(60, 4.8%, 95.9%) 25%, hsl(20, 5.9%, 90%) 50%, hsl(60, 4.8%, 95.9%) 75%);\n    background-size: 200% 100%;\n    animation: loading 1.5s infinite;\n  }\n\n  @keyframes loading {\n    0% {\n      background-position: 200% 0;\n    }\n    100% {\n      background-position: -200% 0;\n    }\n  }\n\n  /* Chart container styling */\n  .financial-chart {\n    background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(259, 100%, 65%) 100%);\n    border-radius: 0.5rem;\n    color: white;\n  }\n\n  /* Navigation improvements */\n  .nav-item {\n    transition: all 0.2s ease-in-out;\n  }\n\n  .nav-item:hover {\n    transform: translateX(-2px);\n  }\n\n  /* Card shadows for depth */\n  .card-elevated {\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  }\n\n  .card-elevated:hover {\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  }\n}\n\n/* Responsive adjustments for mobile */\n@media (max-width: 768px) {\n  .sidebar {\n    transform: translateX(100%);\n    transition: transform 0.3s ease-in-out;\n  }\n\n  .sidebar.open {\n    transform: translateX(0);\n  }\n\n  .main-content {\n    padding: 1rem;\n  }\n\n  .accounting-table {\n    font-size: 0.875rem;\n  }\n\n  .card-grid {\n    grid-template-columns: 1fr;\n  }\n}\n\n/* Print styles for reports */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n\n  .print-only {\n    display: block !important;\n  }\n\n  body {\n    background: white !important;\n    color: black !important;\n  }\n\n  .card {\n    box-shadow: none !important;\n    border: 1px solid #ccc !important;\n  }\n}\n","size_bytes":6662},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/chart-of-accounts.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport TopBar from \"@/components/layout/TopBar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Edit, Trash2, Search, Filter } from \"lucide-react\";\n\nexport default function ChartOfAccounts() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState(\"all\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingAccount, setEditingAccount] = useState<any>(null);\n\n  // For demo, using company ID 1\n  const companyId = 1;\n\n  const { data: accounts, isLoading, error } = useQuery({\n    queryKey: [\"/api/companies\", companyId, \"accounts\"],\n  });\n\n  // Handle errors with useEffect\n  useEffect(() => {\n    if (error && isUnauthorizedError(error)) {\n      toast({\n        title: \"غير مخول\",\n        description: \"تم تسجيل خروجك. جاري تسجيل الدخول مرة أخرى...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [error, toast]);\n\n  const createAccountMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/accounts\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\", companyId, \"accounts\"] });\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم إنشاء الحساب بنجاح\",\n      });\n      setIsDialogOpen(false);\n      setEditingAccount(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في إنشاء الحساب\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAccountMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      return await apiRequest(\"PUT\", `/api/accounts/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\", companyId, \"accounts\"] });\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم تحديث الحساب بنجاح\",\n      });\n      setIsDialogOpen(false);\n      setEditingAccount(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في تحديث الحساب\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAccountMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/accounts/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\", companyId, \"accounts\"] });\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم حذف الحساب بنجاح\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في حذف الحساب\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    const data = {\n      code: formData.get(\"code\") as string,\n      name: formData.get(\"name\") as string,\n      nameArabic: formData.get(\"nameArabic\") as string,\n      type: formData.get(\"type\") as string,\n      subType: formData.get(\"subType\") as string,\n      companyId,\n      isActive: true,\n    };\n\n    if (editingAccount) {\n      updateAccountMutation.mutate({ id: editingAccount.id, data });\n    } else {\n      createAccountMutation.mutate(data);\n    }\n  };\n\n  const accountsData = accounts || [];\n  \n  const filteredAccounts = accountsData.filter((account: any) => {\n    const matchesSearch = \n      account.code.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      account.nameArabic.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesFilter = filterType === \"all\" || account.type === filterType;\n    \n    return matchesSearch && matchesFilter;\n  });\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case 'assets': return 'أصول';\n      case 'liabilities': return 'خصوم';\n      case 'equity': return 'حقوق الملكية';\n      case 'revenue': return 'إيرادات';\n      case 'expenses': return 'مصروفات';\n      default: return type;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col\">\n        <TopBar title=\"دليل الحسابات\" subtitle=\"إدارة الحسابات المالية\" />\n        \n        <main className=\"flex-1 p-6 overflow-y-auto\">\n          <Card>\n            <CardContent className=\"p-6\">\n              {/* Header Actions */}\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"flex items-center space-x-4 space-x-reverse\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute right-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      placeholder=\"البحث في الحسابات...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pr-10 w-64\"\n                      data-testid=\"input-search-accounts\"\n                    />\n                  </div>\n                  <Select value={filterType} onValueChange={setFilterType}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-filter-type\">\n                      <Filter className=\"w-4 h-4 ml-2\" />\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">جميع الأنواع</SelectItem>\n                      <SelectItem value=\"assets\">أصول</SelectItem>\n                      <SelectItem value=\"liabilities\">خصوم</SelectItem>\n                      <SelectItem value=\"equity\">حقوق الملكية</SelectItem>\n                      <SelectItem value=\"revenue\">إيرادات</SelectItem>\n                      <SelectItem value=\"expenses\">مصروفات</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-add-account\">\n                      <Plus className=\"w-4 h-4 ml-2\" />\n                      إضافة حساب جديد\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle>\n                        {editingAccount ? \"تعديل الحساب\" : \"إضافة حساب جديد\"}\n                      </DialogTitle>\n                    </DialogHeader>\n                    <form onSubmit={handleSubmit} className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"code\">رمز الحساب</Label>\n                        <Input\n                          id=\"code\"\n                          name=\"code\"\n                          defaultValue={editingAccount?.code || \"\"}\n                          required\n                          data-testid=\"input-account-code\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"name\">اسم الحساب (بالإنجليزية)</Label>\n                        <Input\n                          id=\"name\"\n                          name=\"name\"\n                          defaultValue={editingAccount?.name || \"\"}\n                          required\n                          data-testid=\"input-account-name\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"nameArabic\">اسم الحساب (بالعربية)</Label>\n                        <Input\n                          id=\"nameArabic\"\n                          name=\"nameArabic\"\n                          defaultValue={editingAccount?.nameArabic || \"\"}\n                          required\n                          data-testid=\"input-account-name-arabic\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"type\">نوع الحساب</Label>\n                        <Select name=\"type\" defaultValue={editingAccount?.type || \"\"} required>\n                          <SelectTrigger data-testid=\"select-account-type\">\n                            <SelectValue placeholder=\"اختر نوع الحساب\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"assets\">أصول</SelectItem>\n                            <SelectItem value=\"liabilities\">خصوم</SelectItem>\n                            <SelectItem value=\"equity\">حقوق الملكية</SelectItem>\n                            <SelectItem value=\"revenue\">إيرادات</SelectItem>\n                            <SelectItem value=\"expenses\">مصروفات</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"subType\">النوع الفرعي</Label>\n                        <Input\n                          id=\"subType\"\n                          name=\"subType\"\n                          defaultValue={editingAccount?.subType || \"\"}\n                          placeholder=\"مثال: أصول متداولة\"\n                          data-testid=\"input-account-subtype\"\n                        />\n                      </div>\n                      <div className=\"flex space-x-2 space-x-reverse pt-4\">\n                        <Button\n                          type=\"submit\"\n                          disabled={createAccountMutation.isPending || updateAccountMutation.isPending}\n                          data-testid=\"button-save-account\"\n                        >\n                          {editingAccount ? \"تحديث\" : \"إضافة\"}\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => {\n                            setIsDialogOpen(false);\n                            setEditingAccount(null);\n                          }}\n                          data-testid=\"button-cancel\"\n                        >\n                          إلغاء\n                        </Button>\n                      </div>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              {/* Accounts Table */}\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-gray-200\">\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">رمز الحساب</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">اسم الحساب</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">النوع</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">النوع الفرعي</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">الحالة</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">العمليات</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {isLoading ? (\n                      [...Array(5)].map((_, i) => (\n                        <tr key={i} className=\"border-b border-gray-100\">\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-16 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-32 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-24 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-28 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-6 bg-gray-200 rounded-full w-16 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-16 animate-pulse\"></div></td>\n                        </tr>\n                      ))\n                    ) : filteredAccounts && filteredAccounts.length > 0 ? (\n                      filteredAccounts.map((account: any) => (\n                        <tr key={account.id} className=\"border-b border-gray-100 hover:bg-gray-50\" data-testid={`account-row-${account.id}`}>\n                          <td className=\"py-3 px-4 arabic-number font-mono\" data-testid={`account-code-${account.id}`}>\n                            {account.code}\n                          </td>\n                          <td className=\"py-3 px-4 font-medium\" data-testid={`account-name-${account.id}`}>\n                            {account.nameArabic || account.name}\n                          </td>\n                          <td className=\"py-3 px-4 text-gray-600\" data-testid={`account-type-${account.id}`}>\n                            {getTypeLabel(account.type)}\n                          </td>\n                          <td className=\"py-3 px-4 text-gray-600\" data-testid={`account-subtype-${account.id}`}>\n                            {account.subType || \"-\"}\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                              account.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                            }`} data-testid={`account-status-${account.id}`}>\n                              {account.isActive ? 'نشط' : 'غير نشط'}\n                            </span>\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <div className=\"flex space-x-2 space-x-reverse\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setEditingAccount(account);\n                                  setIsDialogOpen(true);\n                                }}\n                                className=\"text-blue-600 hover:text-blue-700\"\n                                data-testid={`button-edit-account-${account.id}`}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  if (confirm(\"هل أنت متأكد من حذف هذا الحساب؟\")) {\n                                    deleteAccountMutation.mutate(account.id);\n                                  }\n                                }}\n                                className=\"text-red-600 hover:text-red-700\"\n                                data-testid={`button-delete-account-${account.id}`}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))\n                    ) : (\n                      <tr>\n                        <td colSpan={6} className=\"text-center py-8 text-gray-500\" data-testid=\"empty-accounts\">\n                          <div className=\"flex flex-col items-center\">\n                            <Plus className=\"w-12 h-12 text-gray-300 mb-4\" />\n                            <p>لا توجد حسابات</p>\n                            <p className=\"text-sm mt-1\">قم بإضافة حساب جديد للبدء</p>\n                          </div>\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17520},"client/src/pages/companies.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport TopBar from \"@/components/layout/TopBar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Edit, Trash2, Building2, MapPin, Phone, Mail, Hash, Search } from \"lucide-react\";\n\nexport default function Companies() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCompany, setEditingCompany] = useState<any>(null);\n\n  const { data: companies, isLoading, error } = useQuery({\n    queryKey: [\"/api/companies\"],\n  });\n\n  // Handle errors with useEffect\n  useEffect(() => {\n    if (error && isUnauthorizedError(error)) {\n      toast({\n        title: \"غير مخول\",\n        description: \"تم تسجيل خروجك. جاري تسجيل الدخول مرة أخرى...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [error, toast]);\n\n  const createCompanyMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/companies\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم إنشاء الشركة بنجاح\",\n      });\n      setIsDialogOpen(false);\n      setEditingCompany(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في إنشاء الشركة\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCompanyMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      return await apiRequest(\"PUT\", `/api/companies/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم تحديث الشركة بنجاح\",\n      });\n      setIsDialogOpen(false);\n      setEditingCompany(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في تحديث الشركة\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCompanyMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/companies/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم حذف الشركة بنجاح\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في حذف الشركة\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    const data = {\n      name: formData.get(\"name\") as string,\n      nameArabic: formData.get(\"nameArabic\") as string,\n      taxNumber: formData.get(\"taxNumber\") as string,\n      address: formData.get(\"address\") as string,\n      addressArabic: formData.get(\"addressArabic\") as string,\n      phone: formData.get(\"phone\") as string,\n      email: formData.get(\"email\") as string,\n      isActive: true,\n    };\n\n    if (editingCompany) {\n      updateCompanyMutation.mutate({ id: editingCompany.id, data });\n    } else {\n      createCompanyMutation.mutate(data);\n    }\n  };\n\n  const companiesData = companies || [];\n  \n  const filteredCompanies = companiesData.filter((company: any) => {\n    return (\n      company.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      company.nameArabic.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (company.taxNumber && company.taxNumber.toLowerCase().includes(searchTerm.toLowerCase()))\n    );\n  });\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col\">\n        <TopBar title=\"إدارة الشركات\" subtitle=\"إدارة وتتبع الشركات المختلفة\" />\n        \n        <main className=\"flex-1 p-6 overflow-y-auto\">\n          <Card>\n            <CardContent className=\"p-6\">\n              {/* Header Actions */}\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"relative\">\n                  <Search className=\"absolute right-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"البحث في الشركات...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pr-10 w-64\"\n                    data-testid=\"input-search-companies\"\n                  />\n                </div>\n                \n                <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-add-company\">\n                      <Plus className=\"w-4 h-4 ml-2\" />\n                      إضافة شركة جديدة\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle>\n                        {editingCompany ? \"تعديل الشركة\" : \"إضافة شركة جديدة\"}\n                      </DialogTitle>\n                    </DialogHeader>\n                    <form onSubmit={handleSubmit} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"name\">اسم الشركة (بالإنجليزية)</Label>\n                          <Input\n                            id=\"name\"\n                            name=\"name\"\n                            defaultValue={editingCompany?.name || \"\"}\n                            required\n                            data-testid=\"input-company-name\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"nameArabic\">اسم الشركة (بالعربية)</Label>\n                          <Input\n                            id=\"nameArabic\"\n                            name=\"nameArabic\"\n                            defaultValue={editingCompany?.nameArabic || \"\"}\n                            required\n                            data-testid=\"input-company-name-arabic\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"taxNumber\">الرقم الضريبي</Label>\n                          <Input\n                            id=\"taxNumber\"\n                            name=\"taxNumber\"\n                            defaultValue={editingCompany?.taxNumber || \"\"}\n                            data-testid=\"input-tax-number\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"phone\">رقم الهاتف</Label>\n                          <Input\n                            id=\"phone\"\n                            name=\"phone\"\n                            type=\"tel\"\n                            defaultValue={editingCompany?.phone || \"\"}\n                            data-testid=\"input-phone\"\n                          />\n                        </div>\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"email\">البريد الإلكتروني</Label>\n                        <Input\n                          id=\"email\"\n                          name=\"email\"\n                          type=\"email\"\n                          defaultValue={editingCompany?.email || \"\"}\n                          data-testid=\"input-email\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"address\">العنوان (بالإنجليزية)</Label>\n                        <Textarea\n                          id=\"address\"\n                          name=\"address\"\n                          defaultValue={editingCompany?.address || \"\"}\n                          rows={3}\n                          data-testid=\"textarea-address\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"addressArabic\">العنوان (بالعربية)</Label>\n                        <Textarea\n                          id=\"addressArabic\"\n                          name=\"addressArabic\"\n                          defaultValue={editingCompany?.addressArabic || \"\"}\n                          rows={3}\n                          data-testid=\"textarea-address-arabic\"\n                        />\n                      </div>\n                      \n                      <div className=\"flex space-x-2 space-x-reverse pt-4\">\n                        <Button\n                          type=\"submit\"\n                          disabled={createCompanyMutation.isPending || updateCompanyMutation.isPending}\n                          data-testid=\"button-save-company\"\n                        >\n                          {editingCompany ? \"تحديث\" : \"إضافة\"}\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => {\n                            setIsDialogOpen(false);\n                            setEditingCompany(null);\n                          }}\n                          data-testid=\"button-cancel\"\n                        >\n                          إلغاء\n                        </Button>\n                      </div>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              {/* Companies Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {isLoading ? (\n                  [...Array(6)].map((_, i) => (\n                    <Card key={i} className=\"animate-pulse\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"h-6 bg-gray-200 rounded w-3/4 mb-4\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-2\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded w-2/3 mb-2\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded w-1/3 mb-4\"></div>\n                        <div className=\"flex space-x-2 space-x-reverse\">\n                          <div className=\"h-8 bg-gray-200 rounded w-16\"></div>\n                          <div className=\"h-8 bg-gray-200 rounded w-16\"></div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : filteredCompanies && filteredCompanies.length > 0 ? (\n                  filteredCompanies.map((company: any) => (\n                    <Card key={company.id} className=\"card-hover transition-all duration-200\" data-testid={`company-card-${company.id}`}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex items-center space-x-3 space-x-reverse\">\n                            <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                              <Building2 className=\"w-6 h-6 text-blue-600\" />\n                            </div>\n                            <div>\n                              <h3 className=\"font-bold text-gray-900\" data-testid={`company-name-${company.id}`}>\n                                {company.nameArabic || company.name}\n                              </h3>\n                              {company.nameArabic && company.name && (\n                                <p className=\"text-sm text-gray-500\">{company.name}</p>\n                              )}\n                            </div>\n                          </div>\n                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                            company.isActive ? 'status-active' : 'status-inactive'\n                          }`} data-testid={`company-status-${company.id}`}>\n                            {company.isActive ? 'نشط' : 'غير نشط'}\n                          </span>\n                        </div>\n\n                        <div className=\"space-y-2 mb-4\">\n                          {company.taxNumber && (\n                            <div className=\"flex items-center text-sm text-gray-600\">\n                              <Hash className=\"w-4 h-4 ml-2\" />\n                              <span>الرقم الضريبي: {company.taxNumber}</span>\n                            </div>\n                          )}\n                          {company.phone && (\n                            <div className=\"flex items-center text-sm text-gray-600\">\n                              <Phone className=\"w-4 h-4 ml-2\" />\n                              <span>{company.phone}</span>\n                            </div>\n                          )}\n                          {company.email && (\n                            <div className=\"flex items-center text-sm text-gray-600\">\n                              <Mail className=\"w-4 h-4 ml-2\" />\n                              <span>{company.email}</span>\n                            </div>\n                          )}\n                          {(company.addressArabic || company.address) && (\n                            <div className=\"flex items-start text-sm text-gray-600\">\n                              <MapPin className=\"w-4 h-4 ml-2 mt-0.5\" />\n                              <span>{company.addressArabic || company.address}</span>\n                            </div>\n                          )}\n                        </div>\n\n                        <div className=\"flex space-x-2 space-x-reverse\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setEditingCompany(company);\n                              setIsDialogOpen(true);\n                            }}\n                            className=\"text-blue-600 hover:text-blue-700\"\n                            data-testid={`button-edit-company-${company.id}`}\n                          >\n                            <Edit className=\"w-4 h-4 ml-1\" />\n                            تعديل\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              if (confirm(\"هل أنت متأكد من حذف هذه الشركة؟\")) {\n                                deleteCompanyMutation.mutate(company.id);\n                              }\n                            }}\n                            className=\"text-red-600 hover:text-red-700\"\n                            data-testid={`button-delete-company-${company.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 ml-1\" />\n                            حذف\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"col-span-full text-center py-12 text-gray-500\" data-testid=\"empty-companies\">\n                    <Building2 className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                    <p className=\"text-lg font-medium\">لا توجد شركات</p>\n                    <p className=\"text-sm mt-1\">قم بإضافة شركة جديدة للبدء</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17041},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport TopBar from \"@/components/layout/TopBar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport FinancialChart from \"@/components/accounting/FinancialChart\";\nimport {\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  FileText,\n  Plus,\n  Download,\n  Eye,\n  Edit,\n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n\n  // Get current company (for demo, we'll use company ID 1)\n  const companyId = 1;\n\n  const { data: financialSummary, isLoading: summaryLoading, error: summaryError } = useQuery({\n    queryKey: [\"/api/companies\", companyId, \"financial-summary\"],\n  });\n\n  const { data: recentEntries, isLoading: entriesLoading, error: entriesError } = useQuery({\n    queryKey: [\"/api/companies\", companyId, \"journal-entries\"],\n  });\n\n  const { data: accounts, isLoading: accountsLoading, error: accountsError } = useQuery({\n    queryKey: [\"/api/companies\", companyId, \"accounts\"],\n  });\n\n  // Handle errors with useEffect\n  useEffect(() => {\n    const errors = [summaryError, entriesError, accountsError].filter(Boolean);\n    for (const error of errors) {\n      if (error && isUnauthorizedError(error)) {\n        toast({\n          title: \"غير مخول\",\n          description: \"تم تسجيل خروجك. جاري تسجيل الدخول مرة أخرى...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    }\n  }, [summaryError, entriesError, accountsError, toast]);\n\n  const summary = financialSummary || {\n    totalRevenue: 0,\n    totalExpenses: 0,\n    netProfit: 0,\n    totalAccounts: 0,\n  };\n\n  const entriesData = recentEntries || [];\n  const accountsData = accounts || [];\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col\">\n        <TopBar title=\"لوحة التحكم\" subtitle=\"مرحباً بك في نظام المحاسبة الذكي\" />\n        \n        <main className=\"flex-1 p-6 overflow-y-auto\">\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {/* Revenue Card */}\n            <Card className=\"hover:shadow-lg transition-all duration-200\" data-testid=\"card-revenue\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">إجمالي الإيرادات</p>\n                    <p className=\"text-2xl font-bold text-gray-900 mt-2\" data-testid=\"text-revenue-amount\">\n                      <span className=\"arabic-number\">{summary.totalRevenue.toLocaleString('ar-SA')}</span> ر.س\n                    </p>\n                    <p className=\"text-sm text-green-600 mt-1\">\n                      <TrendingUp className=\"inline w-4 h-4 ml-1\" />\n                      <span className=\"arabic-number\">+١٢%</span> من الشهر الماضي\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <TrendingUp className=\"text-green-600 text-lg\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Expenses Card */}\n            <Card className=\"hover:shadow-lg transition-all duration-200\" data-testid=\"card-expenses\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">إجمالي المصروفات</p>\n                    <p className=\"text-2xl font-bold text-gray-900 mt-2\" data-testid=\"text-expenses-amount\">\n                      <span className=\"arabic-number\">{summary.totalExpenses.toLocaleString('ar-SA')}</span> ر.س\n                    </p>\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      <TrendingDown className=\"inline w-4 h-4 ml-1\" />\n                      <span className=\"arabic-number\">-٥%</span> من الشهر الماضي\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                    <TrendingDown className=\"text-red-600 text-lg\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Profit Card */}\n            <Card className=\"hover:shadow-lg transition-all duration-200\" data-testid=\"card-profit\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">صافي الربح</p>\n                    <p className=\"text-2xl font-bold text-gray-900 mt-2\" data-testid=\"text-profit-amount\">\n                      <span className=\"arabic-number\">{summary.netProfit.toLocaleString('ar-SA')}</span> ر.س\n                    </p>\n                    <p className=\"text-sm text-green-600 mt-1\">\n                      <TrendingUp className=\"inline w-4 h-4 ml-1\" />\n                      <span className=\"arabic-number\">+٢٨%</span> من الشهر الماضي\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <DollarSign className=\"text-blue-600 text-lg\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Accounts Card */}\n            <Card className=\"hover:shadow-lg transition-all duration-200\" data-testid=\"card-accounts\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">عدد الحسابات</p>\n                    <p className=\"text-2xl font-bold text-gray-900 mt-2\" data-testid=\"text-accounts-count\">\n                      <span className=\"arabic-number\">{summary.totalAccounts}</span>\n                    </p>\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      <span className=\"arabic-number\">+٨</span> حسابات جديدة\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                    <FileText className=\"text-yellow-600 text-lg\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Charts and Tables Section */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n            {/* Financial Chart */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-lg font-bold text-gray-900\">الإيرادات والمصروفات</h3>\n                  <select className=\"border border-gray-300 rounded-lg px-3 py-2 text-sm\">\n                    <option>آخر ٦ أشهر</option>\n                    <option>آخر سنة</option>\n                    <option>آخر ٣ سنوات</option>\n                  </select>\n                </div>\n                <FinancialChart data={summary} />\n              </CardContent>\n            </Card>\n\n            {/* Recent Transactions */}\n            <Card data-testid=\"card-recent-transactions\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-lg font-bold text-gray-900\">آخر المعاملات</h3>\n                  <Button variant=\"link\" className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\">\n                    عرض الكل\n                  </Button>\n                </div>\n                <div className=\"space-y-4\">\n                  {entriesLoading ? (\n                    <div className=\"space-y-3\">\n                      {[...Array(4)].map((_, i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"flex items-center justify-between p-3 border border-gray-100 rounded-lg\">\n                            <div className=\"flex items-center space-x-3 space-x-reverse\">\n                              <div className=\"w-10 h-10 bg-gray-200 rounded-lg\"></div>\n                              <div>\n                                <div className=\"h-4 bg-gray-200 rounded w-24 mb-2\"></div>\n                                <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n                              </div>\n                            </div>\n                            <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : entriesData && entriesData.length > 0 ? (\n                    entriesData.slice(0, 4).map((entry: any) => {\n                      const isRevenue = entry.details.some((detail: any) => \n                        detail.account.type === 'revenue' && Number(detail.credit) > 0\n                      );\n                      return (\n                        <div key={entry.id} className=\"flex items-center justify-between p-3 border border-gray-100 rounded-lg\" data-testid={`transaction-${entry.id}`}>\n                          <div className=\"flex items-center space-x-3 space-x-reverse\">\n                            <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${isRevenue ? 'bg-green-100' : 'bg-red-100'}`}>\n                              {isRevenue ? (\n                                <Plus className=\"text-green-600\" />\n                              ) : (\n                                <TrendingDown className=\"text-red-600\" />\n                              )}\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-gray-900\" data-testid={`transaction-description-${entry.id}`}>\n                                {entry.descriptionArabic || entry.description}\n                              </p>\n                              <p className=\"text-sm text-gray-500\" data-testid={`transaction-date-${entry.id}`}>\n                                {new Date(entry.date).toLocaleDateString('ar-SA')}\n                              </p>\n                            </div>\n                          </div>\n                          <span className={`font-bold ${isRevenue ? 'text-green-600' : 'text-red-600'}`} data-testid={`transaction-amount-${entry.id}`}>\n                            {isRevenue ? '+' : '-'}{Number(entry.totalDebit).toLocaleString('ar-SA')} ر.س\n                          </span>\n                        </div>\n                      );\n                    })\n                  ) : (\n                    <div className=\"text-center py-8 text-gray-500\" data-testid=\"empty-transactions\">\n                      <FileText className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                      <p>لا توجد معاملات حديثة</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Account Summary Table */}\n          <Card className=\"mb-8\" data-testid=\"card-account-summary\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-lg font-bold text-gray-900\">ملخص الحسابات</h3>\n                <div className=\"flex space-x-2 space-x-reverse\">\n                  <Button className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-add-account\">\n                    <Plus className=\"w-4 h-4 ml-2\" />\n                    إضافة حساب جديد\n                  </Button>\n                  <Button variant=\"outline\" data-testid=\"button-export\">\n                    <Download className=\"w-4 h-4 ml-2\" />\n                    تصدير\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-gray-200\">\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">رمز الحساب</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">اسم الحساب</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">نوع الحساب</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">الرصيد</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">الحالة</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">العمليات</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {accountsLoading ? (\n                      [...Array(4)].map((_, i) => (\n                        <tr key={i} className=\"border-b border-gray-100\">\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-16 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-32 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-24 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-20 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-6 bg-gray-200 rounded-full w-16 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-16 animate-pulse\"></div></td>\n                        </tr>\n                      ))\n                    ) : accountsData && accountsData.length > 0 ? (\n                      accountsData.slice(0, 4).map((account: any) => (\n                        <tr key={account.id} className=\"border-b border-gray-100 hover:bg-gray-50\" data-testid={`account-row-${account.id}`}>\n                          <td className=\"py-3 px-4 arabic-number\" data-testid={`account-code-${account.id}`}>{account.code}</td>\n                          <td className=\"py-3 px-4 font-medium\" data-testid={`account-name-${account.id}`}>\n                            {account.nameArabic || account.name}\n                          </td>\n                          <td className=\"py-3 px-4 text-gray-600\" data-testid={`account-type-${account.id}`}>\n                            {account.type === 'assets' ? 'أصول' :\n                             account.type === 'liabilities' ? 'خصوم' :\n                             account.type === 'equity' ? 'حقوق الملكية' :\n                             account.type === 'revenue' ? 'إيرادات' :\n                             account.type === 'expenses' ? 'مصروفات' : account.type}\n                          </td>\n                          <td className=\"py-3 px-4 font-bold text-green-600 arabic-number\" data-testid={`account-balance-${account.id}`}>\n                            ٠ ر.س\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                              account.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                            }`} data-testid={`account-status-${account.id}`}>\n                              {account.isActive ? 'نشط' : 'غير نشط'}\n                            </span>\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <div className=\"flex space-x-2 space-x-reverse\">\n                              <button className=\"text-blue-600 hover:text-blue-700\" data-testid={`button-edit-account-${account.id}`}>\n                                <Edit className=\"w-4 h-4\" />\n                              </button>\n                              <button className=\"text-gray-400 hover:text-gray-600\" data-testid={`button-view-account-${account.id}`}>\n                                <Eye className=\"w-4 h-4\" />\n                              </button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))\n                    ) : (\n                      <tr>\n                        <td colSpan={6} className=\"text-center py-8 text-gray-500\" data-testid=\"empty-accounts\">\n                          <FileText className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\n                          <p>لا توجد حسابات</p>\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n\n              {accountsData && accountsData.length > 4 && (\n                <div className=\"flex items-center justify-between mt-6 pt-4 border-t border-gray-200\">\n                  <p className=\"text-sm text-gray-600\">\n                    عرض <span className=\"arabic-number\">١-٤</span> من <span className=\"arabic-number\">{accountsData.length}</span> حساب\n                  </p>\n                  <div className=\"flex space-x-2 space-x-reverse\">\n                    <Button variant=\"outline\" size=\"sm\">السابق</Button>\n                    <Button variant=\"outline\" size=\"sm\" className=\"bg-blue-600 text-white\">١</Button>\n                    <Button variant=\"outline\" size=\"sm\">٢</Button>\n                    <Button variant=\"outline\" size=\"sm\">٣</Button>\n                    <Button variant=\"outline\" size=\"sm\">التالي</Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card data-testid=\"card-quick-actions\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-bold text-gray-900 mb-6\">إجراءات سريعة</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <button className=\"p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-600 hover:bg-blue-50 transition-all duration-200 group\" data-testid=\"button-quick-add-entry\">\n                  <div className=\"text-center\">\n                    <Plus className=\"w-8 h-8 text-gray-400 group-hover:text-blue-600 mx-auto mb-3\" />\n                    <p className=\"font-medium text-gray-700 group-hover:text-blue-600\">إضافة قيد جديد</p>\n                  </div>\n                </button>\n\n                <button className=\"p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-600 hover:bg-blue-50 transition-all duration-200 group\" data-testid=\"button-quick-create-report\">\n                  <div className=\"text-center\">\n                    <FileText className=\"w-8 h-8 text-gray-400 group-hover:text-blue-600 mx-auto mb-3\" />\n                    <p className=\"font-medium text-gray-700 group-hover:text-blue-600\">إنشاء تقرير</p>\n                  </div>\n                </button>\n\n                <button className=\"p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-600 hover:bg-blue-50 transition-all duration-200 group\" data-testid=\"button-quick-add-company\">\n                  <div className=\"text-center\">\n                    <FileText className=\"w-8 h-8 text-gray-400 group-hover:text-blue-600 mx-auto mb-3\" />\n                    <p className=\"font-medium text-gray-700 group-hover:text-blue-600\">إضافة شركة</p>\n                  </div>\n                </button>\n\n                <button className=\"p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-600 hover:bg-blue-50 transition-all duration-200 group\" data-testid=\"button-quick-setup-bot\">\n                  <div className=\"text-center\">\n                    <FileText className=\"w-8 h-8 text-gray-400 group-hover:text-blue-600 mx-auto mb-3\" />\n                    <p className=\"font-medium text-gray-700 group-hover:text-blue-600\">إعداد البوت</p>\n                  </div>\n                </button>\n              </div>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      {/* Floating Action Button */}\n      <div className=\"fixed bottom-6 left-6\">\n        <Button className=\"w-14 h-14 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 hover:scale-110 transition-all duration-200\" data-testid=\"button-floating-add\">\n          <Plus className=\"w-6 h-6\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21391},"client/src/pages/financial-reports.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport TopBar from \"@/components/layout/TopBar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport FinancialChart from \"@/components/accounting/FinancialChart\";\nimport { \n  FileText, \n  Download, \n  Printer, \n  BarChart3, \n  TrendingUp, \n  TrendingDown,\n  DollarSign,\n  Calendar\n} from \"lucide-react\";\n\nexport default function FinancialReports() {\n  const { toast } = useToast();\n  const [reportType, setReportType] = useState(\"income-statement\");\n  const [reportPeriod, setReportPeriod] = useState(\"current-month\");\n\n  // For demo, using company ID 1\n  const companyId = 1;\n\n  const { data: financialSummary, isLoading: summaryLoading, error: summaryError } = useQuery({\n    queryKey: [\"/api/companies\", companyId, \"financial-summary\"],\n  });\n\n  const { data: accounts, isLoading: accountsLoading, error: accountsError } = useQuery({\n    queryKey: [\"/api/companies\", companyId, \"accounts\"],\n  });\n\n  const { data: accountBalances, isLoading: balancesLoading, error: balancesError } = useQuery({\n    queryKey: [\"/api/companies\", companyId, \"account-balances\"],\n  });\n\n  // Handle errors with useEffect\n  useEffect(() => {\n    const errors = [summaryError, accountsError, balancesError].filter(Boolean);\n    for (const error of errors) {\n      if (error && isUnauthorizedError(error)) {\n        toast({\n          title: \"غير مخول\",\n          description: \"تم تسجيل خروجك. جاري تسجيل الدخول مرة أخرى...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    }\n  }, [summaryError, accountsError, balancesError, toast]);\n\n  // Prepare data with defaults\n  const summary = financialSummary || {\n    totalRevenue: 0,\n    totalExpenses: 0,\n    netProfit: 0,\n    totalAccounts: 0,\n  };\n  \n  const accountsData = accounts || [];\n  const balancesData = accountBalances || [];\n\n  const summary = financialSummary || {\n    totalRevenue: 0,\n    totalExpenses: 0,\n    netProfit: 0,\n    totalAccounts: 0,\n  };\n\n  const handleExportReport = (format: string) => {\n    toast({\n      title: \"تصدير التقرير\",\n      description: `جاري تصدير التقرير بصيغة ${format}...`,\n    });\n  };\n\n  const handlePrintReport = () => {\n    window.print();\n  };\n\n  const getReportTitle = () => {\n    switch (reportType) {\n      case \"income-statement\": return \"قائمة الدخل\";\n      case \"balance-sheet\": return \"الميزانية العمومية\";\n      case \"cash-flow\": return \"قائمة التدفقات النقدية\";\n      case \"trial-balance\": return \"ميزان المراجعة\";\n      case \"account-statement\": return \"كشف حساب\";\n      default: return \"التقرير المالي\";\n    }\n  };\n\n  const getPeriodLabel = () => {\n    switch (reportPeriod) {\n      case \"current-month\": return \"الشهر الحالي\";\n      case \"current-quarter\": return \"الربع الحالي\";\n      case \"current-year\": return \"السنة الحالية\";\n      case \"last-month\": return \"الشهر الماضي\";\n      case \"last-quarter\": return \"الربع الماضي\";\n      case \"last-year\": return \"السنة الماضية\";\n      default: return \"الفترة المحددة\";\n    }\n  };\n\n  const renderIncomeStatement = () => (\n    <div className=\"space-y-6\">\n      {/* Revenue Section */}\n      <div>\n        <h4 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n          <TrendingUp className=\"w-5 h-5 ml-2 text-green-600\" />\n          الإيرادات\n        </h4>\n        <div className=\"space-y-2\">\n          {accountsData.filter((account: any) => account.type === 'revenue').map((account: any) => {\n            const balance = balancesData.find((b: any) => b.accountId === account.id);\n            return (\n              <div key={account.id} className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n                <span className=\"text-gray-700\">{account.nameArabic || account.name}</span>\n                <span className=\"font-medium arabic-number amount-positive\">\n                  {Number(balance?.creditBalance || 0).toLocaleString('ar-SA')} ر.س\n                </span>\n              </div>\n            );\n          })}\n          <div className=\"flex justify-between items-center py-3 border-t-2 border-gray-300 font-bold\">\n            <span>إجمالي الإيرادات</span>\n            <span className=\"arabic-number amount-positive text-lg\">\n              {summary.totalRevenue.toLocaleString('ar-SA')} ر.س\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Expenses Section */}\n      <div>\n        <h4 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n          <TrendingDown className=\"w-5 h-5 ml-2 text-red-600\" />\n          المصروفات\n        </h4>\n        <div className=\"space-y-2\">\n          {accountsData.filter((account: any) => account.type === 'expenses').map((account: any) => {\n            const balance = balancesData.find((b: any) => b.accountId === account.id);\n            return (\n              <div key={account.id} className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n                <span className=\"text-gray-700\">{account.nameArabic || account.name}</span>\n                <span className=\"font-medium arabic-number amount-negative\">\n                  {Number(balance?.debitBalance || 0).toLocaleString('ar-SA')} ر.س\n                </span>\n              </div>\n            );\n          })}\n          <div className=\"flex justify-between items-center py-3 border-t-2 border-gray-300 font-bold\">\n            <span>إجمالي المصروفات</span>\n            <span className=\"arabic-number amount-negative text-lg\">\n              {summary.totalExpenses.toLocaleString('ar-SA')} ر.س\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Net Profit Section */}\n      <div className=\"bg-blue-50 p-4 rounded-lg\">\n        <div className=\"flex justify-between items-center\">\n          <h4 className=\"text-xl font-bold text-gray-900 flex items-center\">\n            <DollarSign className=\"w-6 h-6 ml-2 text-blue-600\" />\n            صافي الربح/الخسارة\n          </h4>\n          <span className={`text-2xl font-bold arabic-number ${summary.netProfit >= 0 ? 'amount-positive' : 'amount-negative'}`}>\n            {summary.netProfit.toLocaleString('ar-SA')} ر.س\n          </span>\n        </div>\n        <p className=\"text-sm text-gray-600 mt-2\">\n          {summary.netProfit >= 0 ? 'ربح' : 'خسارة'} للفترة من {getPeriodLabel()}\n        </p>\n      </div>\n    </div>\n  );\n\n  const renderBalanceSheet = () => (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n      {/* Assets */}\n      <div>\n        <h4 className=\"text-lg font-semibold text-gray-900 mb-4\">الأصول</h4>\n        <div className=\"space-y-2\">\n          {accounts?.filter((account: any) => account.type === 'assets').map((account: any) => {\n            const balance = accountBalances?.find((b: any) => b.accountId === account.id);\n            return (\n              <div key={account.id} className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n                <span className=\"text-gray-700\">{account.nameArabic || account.name}</span>\n                <span className=\"font-medium arabic-number\">\n                  {Number(balance?.debitBalance || 0).toLocaleString('ar-SA')} ر.س\n                </span>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Liabilities & Equity */}\n      <div>\n        <h4 className=\"text-lg font-semibold text-gray-900 mb-4\">الخصوم وحقوق الملكية</h4>\n        <div className=\"space-y-4\">\n          <div>\n            <h5 className=\"font-medium text-gray-800 mb-2\">الخصوم</h5>\n            <div className=\"space-y-2\">\n              {accounts?.filter((account: any) => account.type === 'liabilities').map((account: any) => {\n                const balance = accountBalances?.find((b: any) => b.accountId === account.id);\n                return (\n                  <div key={account.id} className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n                    <span className=\"text-gray-700\">{account.nameArabic || account.name}</span>\n                    <span className=\"font-medium arabic-number\">\n                      {Number(balance?.creditBalance || 0).toLocaleString('ar-SA')} ر.س\n                    </span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          \n          <div>\n            <h5 className=\"font-medium text-gray-800 mb-2\">حقوق الملكية</h5>\n            <div className=\"space-y-2\">\n              {accounts?.filter((account: any) => account.type === 'equity').map((account: any) => {\n                const balance = accountBalances?.find((b: any) => b.accountId === account.id);\n                return (\n                  <div key={account.id} className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n                    <span className=\"text-gray-700\">{account.nameArabic || account.name}</span>\n                    <span className=\"font-medium arabic-number\">\n                      {Number(balance?.creditBalance || 0).toLocaleString('ar-SA')} ر.س\n                    </span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderTrialBalance = () => (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full accounting-table\">\n        <thead>\n          <tr className=\"border-b border-gray-200\">\n            <th className=\"text-right py-3 px-4 font-medium text-gray-600\">رمز الحساب</th>\n            <th className=\"text-right py-3 px-4 font-medium text-gray-600\">اسم الحساب</th>\n            <th className=\"text-right py-3 px-4 font-medium text-gray-600\">مدين</th>\n            <th className=\"text-right py-3 px-4 font-medium text-gray-600\">دائن</th>\n          </tr>\n        </thead>\n        <tbody>\n          {accounts?.map((account: any) => {\n            const balance = accountBalances?.find((b: any) => b.accountId === account.id);\n            const debitBalance = Number(balance?.debitBalance || 0);\n            const creditBalance = Number(balance?.creditBalance || 0);\n            \n            if (debitBalance === 0 && creditBalance === 0) return null;\n            \n            return (\n              <tr key={account.id} className=\"border-b border-gray-100\">\n                <td className=\"py-3 px-4 arabic-number font-mono\">{account.code}</td>\n                <td className=\"py-3 px-4\">{account.nameArabic || account.name}</td>\n                <td className=\"py-3 px-4 arabic-number font-medium\">\n                  {debitBalance > 0 ? debitBalance.toLocaleString('ar-SA') : '-'}\n                </td>\n                <td className=\"py-3 px-4 arabic-number font-medium\">\n                  {creditBalance > 0 ? creditBalance.toLocaleString('ar-SA') : '-'}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n\n  const renderReportContent = () => {\n    if (summaryLoading || accountsLoading || balancesLoading) {\n      return (\n        <div className=\"space-y-4\">\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-6 bg-gray-200 rounded w-3/4 mb-2\"></div>\n              <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n            </div>\n          ))}\n        </div>\n      );\n    }\n\n    switch (reportType) {\n      case \"income-statement\":\n        return renderIncomeStatement();\n      case \"balance-sheet\":\n        return renderBalanceSheet();\n      case \"trial-balance\":\n        return renderTrialBalance();\n      case \"cash-flow\":\n        return (\n          <div className=\"text-center py-12 text-gray-500\">\n            <FileText className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n            <p>قائمة التدفقات النقدية قيد التطوير</p>\n          </div>\n        );\n      case \"account-statement\":\n        return (\n          <div className=\"text-center py-12 text-gray-500\">\n            <FileText className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n            <p>كشف الحساب قيد التطوير</p>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col\">\n        <TopBar title=\"التقارير المالية\" subtitle=\"تقارير شاملة للوضع المالي\" />\n        \n        <main className=\"flex-1 p-6 overflow-y-auto\">\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <Card className=\"card-elevated\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">إجمالي الإيرادات</p>\n                    <p className=\"text-2xl font-bold text-green-600 mt-2\" data-testid=\"total-revenue\">\n                      <span className=\"arabic-number\">{summary.totalRevenue.toLocaleString('ar-SA')}</span> ر.س\n                    </p>\n                  </div>\n                  <TrendingUp className=\"w-8 h-8 text-green-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"card-elevated\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">إجمالي المصروفات</p>\n                    <p className=\"text-2xl font-bold text-red-600 mt-2\" data-testid=\"total-expenses\">\n                      <span className=\"arabic-number\">{summary.totalExpenses.toLocaleString('ar-SA')}</span> ر.س\n                    </p>\n                  </div>\n                  <TrendingDown className=\"w-8 h-8 text-red-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"card-elevated\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">صافي الربح</p>\n                    <p className={`text-2xl font-bold mt-2 ${summary.netProfit >= 0 ? 'text-blue-600' : 'text-red-600'}`} data-testid=\"net-profit\">\n                      <span className=\"arabic-number\">{summary.netProfit.toLocaleString('ar-SA')}</span> ر.س\n                    </p>\n                  </div>\n                  <DollarSign className=\"w-8 h-8 text-blue-600\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Chart Section */}\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-bold text-gray-900 mb-6\">نظرة عامة على الأداء المالي</h3>\n              <FinancialChart data={summary} />\n            </CardContent>\n          </Card>\n\n          {/* Reports Section */}\n          <Card>\n            <CardContent className=\"p-6\">\n              {/* Report Controls */}\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"flex items-center space-x-4 space-x-reverse\">\n                  <Select value={reportType} onValueChange={setReportType}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-report-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"income-statement\">قائمة الدخل</SelectItem>\n                      <SelectItem value=\"balance-sheet\">الميزانية العمومية</SelectItem>\n                      <SelectItem value=\"trial-balance\">ميزان المراجعة</SelectItem>\n                      <SelectItem value=\"cash-flow\">قائمة التدفقات النقدية</SelectItem>\n                      <SelectItem value=\"account-statement\">كشف حساب</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={reportPeriod} onValueChange={setReportPeriod}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-report-period\">\n                      <Calendar className=\"w-4 h-4 ml-2\" />\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"current-month\">الشهر الحالي</SelectItem>\n                      <SelectItem value=\"current-quarter\">الربع الحالي</SelectItem>\n                      <SelectItem value=\"current-year\">السنة الحالية</SelectItem>\n                      <SelectItem value=\"last-month\">الشهر الماضي</SelectItem>\n                      <SelectItem value=\"last-quarter\">الربع الماضي</SelectItem>\n                      <SelectItem value=\"last-year\">السنة الماضية</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex space-x-2 space-x-reverse\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={handlePrintReport}\n                    data-testid=\"button-print-report\"\n                  >\n                    <Printer className=\"w-4 h-4 ml-2\" />\n                    طباعة\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => handleExportReport('PDF')}\n                    data-testid=\"button-export-pdf\"\n                  >\n                    <Download className=\"w-4 h-4 ml-2\" />\n                    تصدير PDF\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => handleExportReport('Excel')}\n                    data-testid=\"button-export-excel\"\n                  >\n                    <Download className=\"w-4 h-4 ml-2\" />\n                    تصدير Excel\n                  </Button>\n                </div>\n              </div>\n\n              {/* Report Header */}\n              <div className=\"border-b border-gray-200 pb-4 mb-6\">\n                <h2 className=\"text-2xl font-bold text-gray-900\" data-testid=\"report-title\">\n                  {getReportTitle()}\n                </h2>\n                <p className=\"text-gray-600 mt-2\" data-testid=\"report-period\">\n                  الفترة: {getPeriodLabel()} | تاريخ التقرير: {new Date().toLocaleDateString('ar-SA')}\n                </p>\n              </div>\n\n              {/* Report Content */}\n              <div className=\"report-content\" data-testid=\"report-content\">\n                {renderReportContent()}\n              </div>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19736},"client/src/pages/journal-entries.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport TopBar from \"@/components/layout/TopBar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport JournalEntryForm from \"@/components/accounting/JournalEntryForm\";\nimport { Plus, Edit, Trash2, Search, FileText, Calendar, Eye } from \"lucide-react\";\n\nexport default function JournalEntries() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingEntry, setEditingEntry] = useState<any>(null);\n\n  // For demo, using company ID 1\n  const companyId = 1;\n\n  const { data: journalEntries, isLoading, error: entriesError } = useQuery({\n    queryKey: [\"/api/companies\", companyId, \"journal-entries\"],\n  });\n\n  const { data: accounts, error: accountsError } = useQuery({\n    queryKey: [\"/api/companies\", companyId, \"accounts\"],\n  });\n\n  // Handle errors with useEffect\n  useEffect(() => {\n    const errors = [entriesError, accountsError].filter(Boolean);\n    for (const error of errors) {\n      if (error && isUnauthorizedError(error)) {\n        toast({\n          title: \"غير مخول\",\n          description: \"تم تسجيل خروجك. جاري تسجيل الدخول مرة أخرى...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    }\n  }, [entriesError, accountsError, toast]);\n\n  const createEntryMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/journal-entries\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\", companyId, \"journal-entries\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\", companyId, \"financial-summary\"] });\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم إنشاء القيد المحاسبي بنجاح\",\n      });\n      setIsDialogOpen(false);\n      setEditingEntry(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في إنشاء القيد المحاسبي\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEntryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      return await apiRequest(\"PUT\", `/api/journal-entries/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\", companyId, \"journal-entries\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\", companyId, \"financial-summary\"] });\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم تحديث القيد المحاسبي بنجاح\",\n      });\n      setIsDialogOpen(false);\n      setEditingEntry(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في تحديث القيد المحاسبي\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEntryMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/journal-entries/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\", companyId, \"journal-entries\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\", companyId, \"financial-summary\"] });\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم حذف القيد المحاسبي بنجاح\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في حذف القيد المحاسبي\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateEntry = (data: any) => {\n    createEntryMutation.mutate(data);\n  };\n\n  const handleUpdateEntry = (data: any) => {\n    if (editingEntry) {\n      updateEntryMutation.mutate({ id: editingEntry.id, data });\n    }\n  };\n\n  const entriesData = journalEntries || [];\n  const accountsData = accounts || [];\n  \n  const filteredEntries = entriesData.filter((entry: any) => {\n    return (\n      entry.entryNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      entry.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      entry.descriptionArabic.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  });\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col\">\n        <TopBar title=\"القيود المحاسبية\" subtitle=\"إدارة وتتبع جميع القيود المحاسبية\" />\n        \n        <main className=\"flex-1 p-6 overflow-y-auto\">\n          <Card>\n            <CardContent className=\"p-6\">\n              {/* Header Actions */}\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"flex items-center space-x-4 space-x-reverse\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute right-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      placeholder=\"البحث في القيود...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pr-10 w-64\"\n                      data-testid=\"input-search-entries\"\n                    />\n                  </div>\n                </div>\n                \n                <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-add-entry\">\n                      <Plus className=\"w-4 h-4 ml-2\" />\n                      إضافة قيد محاسبي\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle>\n                        {editingEntry ? \"تعديل القيد المحاسبي\" : \"إضافة قيد محاسبي جديد\"}\n                      </DialogTitle>\n                    </DialogHeader>\n                    <JournalEntryForm\n                      accounts={accounts || []}\n                      onSubmit={editingEntry ? handleUpdateEntry : handleCreateEntry}\n                      initialData={editingEntry}\n                      isLoading={createEntryMutation.isPending || updateEntryMutation.isPending}\n                    />\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              {/* Journal Entries Table */}\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full accounting-table\">\n                  <thead>\n                    <tr className=\"border-b border-gray-200\">\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">رقم القيد</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">التاريخ</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">الوصف</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">المرجع</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">إجمالي المدين</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">إجمالي الدائن</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">العمليات</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {isLoading ? (\n                      [...Array(5)].map((_, i) => (\n                        <tr key={i} className=\"border-b border-gray-100\">\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-20 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-24 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-40 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-16 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-20 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-20 animate-pulse\"></div></td>\n                          <td className=\"py-3 px-4\"><div className=\"h-4 bg-gray-200 rounded w-16 animate-pulse\"></div></td>\n                        </tr>\n                      ))\n                    ) : filteredEntries && filteredEntries.length > 0 ? (\n                      filteredEntries.map((entry: any) => (\n                        <tr key={entry.id} className=\"border-b border-gray-100 hover:bg-gray-50\" data-testid={`entry-row-${entry.id}`}>\n                          <td className=\"py-3 px-4 arabic-number font-mono\" data-testid={`entry-number-${entry.id}`}>\n                            {entry.entryNumber}\n                          </td>\n                          <td className=\"py-3 px-4 text-gray-600\" data-testid={`entry-date-${entry.id}`}>\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"w-4 h-4 ml-2 text-gray-400\" />\n                              {new Date(entry.date).toLocaleDateString('ar-SA')}\n                            </div>\n                          </td>\n                          <td className=\"py-3 px-4 font-medium\" data-testid={`entry-description-${entry.id}`}>\n                            <div>\n                              <p className=\"text-gray-900\">{entry.descriptionArabic || entry.description}</p>\n                              {entry.descriptionArabic && entry.description && (\n                                <p className=\"text-sm text-gray-500\">{entry.description}</p>\n                              )}\n                            </div>\n                          </td>\n                          <td className=\"py-3 px-4 text-gray-600\" data-testid={`entry-reference-${entry.id}`}>\n                            {entry.reference || \"-\"}\n                          </td>\n                          <td className=\"py-3 px-4 font-bold arabic-number amount-positive\" data-testid={`entry-debit-${entry.id}`}>\n                            {Number(entry.totalDebit).toLocaleString('ar-SA')} ر.س\n                          </td>\n                          <td className=\"py-3 px-4 font-bold arabic-number amount-positive\" data-testid={`entry-credit-${entry.id}`}>\n                            {Number(entry.totalCredit).toLocaleString('ar-SA')} ر.س\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <div className=\"flex space-x-2 space-x-reverse\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  // View entry details\n                                  console.log(\"View entry:\", entry);\n                                }}\n                                className=\"text-gray-600 hover:text-gray-700\"\n                                data-testid={`button-view-entry-${entry.id}`}\n                              >\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setEditingEntry(entry);\n                                  setIsDialogOpen(true);\n                                }}\n                                className=\"text-blue-600 hover:text-blue-700\"\n                                data-testid={`button-edit-entry-${entry.id}`}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  if (confirm(\"هل أنت متأكد من حذف هذا القيد؟\")) {\n                                    deleteEntryMutation.mutate(entry.id);\n                                  }\n                                }}\n                                className=\"text-red-600 hover:text-red-700\"\n                                data-testid={`button-delete-entry-${entry.id}`}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))\n                    ) : (\n                      <tr>\n                        <td colSpan={7} className=\"text-center py-8 text-gray-500\" data-testid=\"empty-entries\">\n                          <div className=\"flex flex-col items-center\">\n                            <FileText className=\"w-12 h-12 text-gray-300 mb-4\" />\n                            <p>لا توجد قيود محاسبية</p>\n                            <p className=\"text-sm mt-1\">قم بإضافة قيد جديد للبدء</p>\n                          </div>\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14450},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calculator, TrendingUp, Users, Shield } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-6\">\n            <div className=\"flex items-center space-x-3 space-x-reverse\">\n              <div className=\"w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center\">\n                <Calculator className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">نظام المحاسبة الذكي</h1>\n                <p className=\"text-sm text-gray-500\">إدارة مالية متطورة</p>\n              </div>\n            </div>\n            <Button \n              onClick={() => window.location.href = '/api/login'}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n              data-testid=\"button-login\"\n            >\n              تسجيل الدخول\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">\n            نظام المحاسبة الذكي\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8 max-w-3xl mx-auto\">\n            نظام محاسبة شامل يدعم اللغة العربية مع واجهة حديثة وتكامل مع تطبيق تيليجرام للإدارة المالية المتطورة\n          </p>\n          <div className=\"flex justify-center space-x-4 space-x-reverse\">\n            <Button \n              size=\"lg\" \n              onClick={() => window.location.href = '/api/login'}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n              data-testid=\"button-get-started\"\n            >\n              ابدأ الآن\n            </Button>\n            <Button variant=\"outline\" size=\"lg\" data-testid=\"button-learn-more\">\n              تعرف على المزيد\n            </Button>\n          </div>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16\">\n          <Card className=\"text-center p-6 hover:shadow-lg transition-shadow\">\n            <CardContent className=\"pt-6\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Calculator className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">دليل الحسابات</h3>\n              <p className=\"text-gray-600 text-sm\">\n                إدارة شاملة لجميع الحسابات المالية مع التصنيف الهيكلي\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center p-6 hover:shadow-lg transition-shadow\">\n            <CardContent className=\"pt-6\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <TrendingUp className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">التقارير المالية</h3>\n              <p className=\"text-gray-600 text-sm\">\n                تقارير مالية شاملة ومخططات بيانية لتحليل الأداء المالي\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center p-6 hover:shadow-lg transition-shadow\">\n            <CardContent className=\"pt-6\">\n              <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-8 h-8 text-purple-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">إدارة الشركات</h3>\n              <p className=\"text-gray-600 text-sm\">\n                دعم الشركات المتعددة مع إدارة منفصلة لكل شركة\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center p-6 hover:shadow-lg transition-shadow\">\n            <CardContent className=\"pt-6\">\n              <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Shield className=\"w-8 h-8 text-red-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">تكامل تيليجرام</h3>\n              <p className=\"text-gray-600 text-sm\">\n                بوت تيليجرام للوصول السريع للبيانات المالية والتقارير\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Key Features */}\n        <div className=\"bg-white rounded-lg shadow-lg p-8\">\n          <h3 className=\"text-2xl font-bold text-center mb-8\">المزايا الرئيسية</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <div>\n              <h4 className=\"text-lg font-semibold mb-4 text-blue-600\">المحاسبة المتطورة</h4>\n              <ul className=\"space-y-2 text-gray-600\">\n                <li>• دليل حسابات شامل ومرن</li>\n                <li>• قيود محاسبية تلقائية وآمنة</li>\n                <li>• حسابات فرعية متعددة المستويات</li>\n                <li>• تتبع الأرصدة في الوقت الفعلي</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"text-lg font-semibold mb-4 text-green-600\">التقارير والتحليل</h4>\n              <ul className=\"space-y-2 text-gray-600\">\n                <li>• تقارير مالية معيارية</li>\n                <li>• مخططات بيانية تفاعلية</li>\n                <li>• تصدير البيانات بصيغ متعددة</li>\n                <li>• تحليل الاتجاهات المالية</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"text-lg font-semibold mb-4 text-purple-600\">إدارة الأعمال</h4>\n              <ul className=\"space-y-2 text-gray-600\">\n                <li>• دعم الشركات المتعددة</li>\n                <li>• إدارة المستخدمين والصلاحيات</li>\n                <li>• النسخ الاحتياطي التلقائي</li>\n                <li>• الأمان والحماية المتقدمة</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"text-lg font-semibold mb-4 text-red-600\">التكامل الذكي</h4>\n              <ul className=\"space-y-2 text-gray-600\">\n                <li>• بوت تيليجرام للاستعلامات</li>\n                <li>• إشعارات فورية ومخصصة</li>\n                <li>• واجهة برمجة تطبيقات مفتوحة</li>\n                <li>• تكامل مع الأنظمة الخارجية</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-800 text-white py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <p className=\"text-gray-300\">\n            © ٢٠٢٥ نظام المحاسبة الذكي. جميع الحقوق محفوظة.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":7850},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/telegram-bot.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport TopBar from \"@/components/layout/TopBar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  MessageSquare, \n  Bot, \n  Settings, \n  Link as LinkIcon, \n  Users, \n  CheckCircle, \n  XCircle,\n  Copy,\n  ExternalLink\n} from \"lucide-react\";\n\nexport default function TelegramBot() {\n  const { toast } = useToast();\n  const [botToken, setBotToken] = useState(\"\");\n  const [webhookUrl, setWebhookUrl] = useState(\"\");\n  const [allowedUsers, setAllowedUsers] = useState(\"\");\n  const [isActive, setIsActive] = useState(false);\n\n  // For demo, using company ID 1\n  const companyId = 1;\n\n  const { data: telegramSettings, isLoading } = useQuery({\n    queryKey: [\"/api/companies\", companyId, \"telegram-settings\"],\n  });\n\n  // Update form fields when data loads\n  useEffect(() => {\n    if (telegramSettings) {\n      setBotToken(telegramSettings.botToken || \"\");\n      setWebhookUrl(telegramSettings.webhookUrl || \"\");\n      setAllowedUsers(telegramSettings.allowedUsers || \"\");\n      setIsActive(telegramSettings.isActive || false);\n    }\n  }, [telegramSettings]);\n\n  const saveSettingsMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/telegram-settings\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\", companyId, \"telegram-settings\"] });\n      toast({\n        title: \"تم بنجاح\",\n        description: \"تم حفظ إعدادات البوت بنجاح\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في حفظ إعدادات البوت\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const setWebhookMutation = useMutation({\n    mutationFn: async (data: { botToken: string; webhookUrl: string }) => {\n      return await apiRequest(\"POST\", \"/api/telegram/set-webhook\", data);\n    },\n    onSuccess: (response: any) => {\n      if (response.ok) {\n        toast({\n          title: \"تم بنجاح\",\n          description: \"تم تفعيل البوت بنجاح\",\n        });\n      } else {\n        toast({\n          title: \"خطأ\",\n          description: \"فشل في تفعيل البوت\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في تفعيل البوت\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveSettings = () => {\n    const data = {\n      companyId,\n      botToken,\n      webhookUrl,\n      allowedUsers,\n      isActive,\n    };\n    saveSettingsMutation.mutate(data);\n  };\n\n  const handleSetWebhook = () => {\n    if (!botToken || !webhookUrl) {\n      toast({\n        title: \"خطأ\",\n        description: \"يرجى إدخال رمز البوت ورابط الويب هوك\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setWebhookMutation.mutate({ botToken, webhookUrl });\n  };\n\n  const handleCopyWebhookUrl = () => {\n    const currentDomain = window.location.origin;\n    const fullWebhookUrl = `${currentDomain}/api/telegram/webhook`;\n    navigator.clipboard.writeText(fullWebhookUrl);\n    setWebhookUrl(fullWebhookUrl);\n    toast({\n      title: \"تم النسخ\",\n      description: \"تم نسخ رابط الويب هوك\",\n    });\n  };\n\n  const botCommands = [\n    { command: \"/start\", description: \"بداية استخدام البوت\" },\n    { command: \"/الملخص\", description: \"عرض الملخص المالي\" },\n    { command: \"/الحسابات\", description: \"عرض دليل الحسابات\" },\n    { command: \"/القيود\", description: \"عرض آخر القيود المحاسبية\" },\n    { command: \"/التقارير\", description: \"عرض التقارير المالية\" },\n    { command: \"/المساعدة\", description: \"عرض قائمة الأوامر\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col\">\n        <TopBar title=\"بوت تيليجرام\" subtitle=\"إعداد وإدارة بوت تيليجرام للمحاسبة\" />\n        \n        <main className=\"flex-1 p-6 overflow-y-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Bot Configuration */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-3 space-x-reverse mb-6\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Settings className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <h3 className=\"text-lg font-bold text-gray-900\">إعدادات البوت</h3>\n                </div>\n\n                <div className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"botToken\">رمز البوت (Bot Token)</Label>\n                    <Input\n                      id=\"botToken\"\n                      type=\"password\"\n                      placeholder=\"أدخل رمز البوت من BotFather\"\n                      value={botToken}\n                      onChange={(e) => setBotToken(e.target.value)}\n                      data-testid=\"input-bot-token\"\n                    />\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      احصل على الرمز من @BotFather في تيليجرام\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"webhookUrl\">رابط الويب هوك</Label>\n                    <div className=\"flex space-x-2 space-x-reverse\">\n                      <Input\n                        id=\"webhookUrl\"\n                        placeholder=\"رابط استقبال رسائل البوت\"\n                        value={webhookUrl}\n                        onChange={(e) => setWebhookUrl(e.target.value)}\n                        data-testid=\"input-webhook-url\"\n                      />\n                      <Button\n                        variant=\"outline\"\n                        onClick={handleCopyWebhookUrl}\n                        data-testid=\"button-copy-webhook\"\n                      >\n                        <Copy className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      اضغط على أيقونة النسخ لنسخ الرابط التلقائي\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"allowedUsers\">المستخدمين المسموح لهم</Label>\n                    <Textarea\n                      id=\"allowedUsers\"\n                      placeholder=\"أدخل معرفات المستخدمين مفصولة بفواصل (مثال: 123456789,987654321)\"\n                      value={allowedUsers}\n                      onChange={(e) => setAllowedUsers(e.target.value)}\n                      rows={3}\n                      data-testid=\"textarea-allowed-users\"\n                    />\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      اتركه فارغاً للسماح لجميع المستخدمين\n                    </p>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label htmlFor=\"isActive\">تفعيل البوت</Label>\n                      <p className=\"text-sm text-gray-500\">\n                        تفعيل أو إلغاء تفعيل استقبال الرسائل\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"isActive\"\n                      checked={isActive}\n                      onCheckedChange={setIsActive}\n                      data-testid=\"switch-bot-active\"\n                    />\n                  </div>\n\n                  <div className=\"flex space-x-3 space-x-reverse pt-4 border-t\">\n                    <Button\n                      onClick={handleSaveSettings}\n                      disabled={saveSettingsMutation.isPending}\n                      className=\"flex-1\"\n                      data-testid=\"button-save-settings\"\n                    >\n                      حفظ الإعدادات\n                    </Button>\n                    <Button\n                      onClick={handleSetWebhook}\n                      disabled={setWebhookMutation.isPending || !botToken || !webhookUrl}\n                      variant=\"outline\"\n                      className=\"flex-1\"\n                      data-testid=\"button-set-webhook\"\n                    >\n                      تفعيل البوت\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Bot Status and Info */}\n            <div className=\"space-y-6\">\n              {/* Bot Status */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-3 space-x-reverse mb-4\">\n                    <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                      <Bot className=\"w-6 h-6 text-green-600\" />\n                    </div>\n                    <h3 className=\"text-lg font-bold text-gray-900\">حالة البوت</h3>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-600\">حالة البوت</span>\n                      <div className=\"flex items-center space-x-2 space-x-reverse\">\n                        {isActive ? (\n                          <>\n                            <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                            <span className=\"text-green-600 font-medium\" data-testid=\"bot-status-active\">نشط</span>\n                          </>\n                        ) : (\n                          <>\n                            <XCircle className=\"w-5 h-5 text-red-600\" />\n                            <span className=\"text-red-600 font-medium\" data-testid=\"bot-status-inactive\">غير نشط</span>\n                          </>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-600\">الويب هوك</span>\n                      <div className=\"flex items-center space-x-2 space-x-reverse\">\n                        {webhookUrl ? (\n                          <>\n                            <LinkIcon className=\"w-5 h-5 text-blue-600\" />\n                            <span className=\"text-blue-600 font-medium\" data-testid=\"webhook-status-configured\">مُعد</span>\n                          </>\n                        ) : (\n                          <>\n                            <XCircle className=\"w-5 h-5 text-red-600\" />\n                            <span className=\"text-red-600 font-medium\" data-testid=\"webhook-status-not-configured\">غير مُعد</span>\n                          </>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-600\">المستخدمين المسموح لهم</span>\n                      <div className=\"flex items-center space-x-2 space-x-reverse\">\n                        <Users className=\"w-5 h-5 text-gray-600\" />\n                        <span className=\"text-gray-600 font-medium\" data-testid=\"allowed-users-count\">\n                          {allowedUsers ? allowedUsers.split(',').length : 'جميع المستخدمين'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {botToken && webhookUrl && (\n                    <div className=\"mt-4 p-3 bg-green-50 rounded-lg\">\n                      <p className=\"text-sm text-green-800\">\n                        ✅ البوت جاهز للاستخدام! يمكنك البحث عن البوت في تيليجرام وبدء المحادثة.\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Bot Commands */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-3 space-x-reverse mb-4\">\n                    <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\n                      <MessageSquare className=\"w-6 h-6 text-purple-600\" />\n                    </div>\n                    <h3 className=\"text-lg font-bold text-gray-900\">أوامر البوت</h3>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    {botCommands.map((cmd, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\" data-testid={`bot-command-${index}`}>\n                        <div>\n                          <span className=\"font-mono text-blue-600 font-medium\">{cmd.command}</span>\n                          <p className=\"text-sm text-gray-600 mt-1\">{cmd.description}</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n\n                  <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n                    <p className=\"text-sm text-blue-800\">\n                      💡 يمكن كتابة الأوامر بدون الرمز / أيضاً. مثال: \"الملخص\" بدلاً من \"/الملخص\"\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Setup Instructions */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-bold text-gray-900 mb-4\">خطوات الإعداد</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start space-x-3 space-x-reverse\">\n                      <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                        1\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">إنشاء البوت</p>\n                        <p className=\"text-sm text-gray-600\">ابحث عن @BotFather في تيليجرام وأرسل /newbot</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3 space-x-reverse\">\n                      <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                        2\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">نسخ الرمز</p>\n                        <p className=\"text-sm text-gray-600\">انسخ رمز البوت والصقه في الحقل أعلاه</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3 space-x-reverse\">\n                      <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                        3\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">تعيين الويب هوك</p>\n                        <p className=\"text-sm text-gray-600\">اضغط على نسخ رابط الويب هوك ثم على تفعيل البوت</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3 space-x-reverse\">\n                      <div className=\"w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                        4\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">البدء في الاستخدام</p>\n                        <p className=\"text-sm text-gray-600\">ابحث عن البوت في تيليجرام وأرسل /start</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17194},"client/src/pages/users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport TopBar from \"@/components/layout/TopBar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Users, Search, Filter, UserPlus, Shield, User, Crown } from \"lucide-react\";\n\nexport default function UsersManagement() {\n  const { toast } = useToast();\n  const { user: currentUser } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState(\"all\");\n  \n  const userData = currentUser || {};\n\n  // Mock users data since we don't have a users API endpoint\n  const mockUsers = [\n    {\n      id: \"1\",\n      firstName: \"أحمد\",\n      lastName: \"محمد\",\n      email: \"ahmed@example.com\",\n      role: \"admin\",\n      isActive: true,\n      createdAt: \"2025-01-01\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\"\n    },\n    {\n      id: \"2\",\n      firstName: \"فاطمة\",\n      lastName: \"أحمد\",\n      email: \"fatima@example.com\",\n      role: \"accountant\",\n      isActive: true,\n      createdAt: \"2025-01-05\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1494790108755-2616b90ee8ef?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\"\n    },\n    {\n      id: \"3\",\n      firstName: \"محمد\",\n      lastName: \"علي\",\n      email: \"mohammed@example.com\",\n      role: \"user\",\n      isActive: true,\n      createdAt: \"2025-01-10\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\"\n    },\n    {\n      id: \"4\",\n      firstName: \"نورا\",\n      lastName: \"سالم\",\n      email: \"nora@example.com\",\n      role: \"user\",\n      isActive: false,\n      createdAt: \"2025-01-15\",\n      profileImageUrl: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\"\n    }\n  ];\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case 'admin': return 'مدير النظام';\n      case 'accountant': return 'محاسب';\n      case 'user': return 'مستخدم';\n      default: return role;\n    }\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'admin': return <Crown className=\"w-4 h-4 text-yellow-600\" />;\n      case 'accountant': return <Shield className=\"w-4 h-4 text-blue-600\" />;\n      case 'user': return <User className=\"w-4 h-4 text-gray-600\" />;\n      default: return <User className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getRoleBadgeClass = (role: string) => {\n    switch (role) {\n      case 'admin': return 'bg-yellow-100 text-yellow-800';\n      case 'accountant': return 'bg-blue-100 text-blue-800';\n      case 'user': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const filteredUsers = mockUsers.filter((user) => {\n    const matchesSearch = \n      user.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesRole = roleFilter === \"all\" || user.role === roleFilter;\n    \n    return matchesSearch && matchesRole;\n  });\n\n  const handleRoleChange = (userId: string, newRole: string) => {\n    toast({\n      title: \"تحديث الصلاحية\",\n      description: `تم تحديث صلاحية المستخدم إلى ${getRoleLabel(newRole)}`,\n    });\n  };\n\n  const handleActivateUser = (userId: string, isActive: boolean) => {\n    toast({\n      title: isActive ? \"تفعيل المستخدم\" : \"إلغاء تفعيل المستخدم\",\n      description: `تم ${isActive ? 'تفعيل' : 'إلغاء تفعيل'} المستخدم بنجاح`,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col\">\n        <TopBar title=\"إدارة المستخدمين\" subtitle=\"إدارة المستخدمين والصلاحيات\" />\n        \n        <main className=\"flex-1 p-6 overflow-y-auto\">\n          {/* Statistics Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"card-elevated\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">إجمالي المستخدمين</p>\n                    <p className=\"text-2xl font-bold text-gray-900 mt-2\" data-testid=\"total-users\">\n                      <span className=\"arabic-number\">{mockUsers.length}</span>\n                    </p>\n                  </div>\n                  <Users className=\"w-8 h-8 text-blue-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"card-elevated\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">المديرين</p>\n                    <p className=\"text-2xl font-bold text-yellow-600 mt-2\" data-testid=\"admin-users\">\n                      <span className=\"arabic-number\">{mockUsers.filter(u => u.role === 'admin').length}</span>\n                    </p>\n                  </div>\n                  <Crown className=\"w-8 h-8 text-yellow-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"card-elevated\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">المحاسبين</p>\n                    <p className=\"text-2xl font-bold text-blue-600 mt-2\" data-testid=\"accountant-users\">\n                      <span className=\"arabic-number\">{mockUsers.filter(u => u.role === 'accountant').length}</span>\n                    </p>\n                  </div>\n                  <Shield className=\"w-8 h-8 text-blue-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"card-elevated\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">المستخدمين النشطين</p>\n                    <p className=\"text-2xl font-bold text-green-600 mt-2\" data-testid=\"active-users\">\n                      <span className=\"arabic-number\">{mockUsers.filter(u => u.isActive).length}</span>\n                    </p>\n                  </div>\n                  <User className=\"w-8 h-8 text-green-600\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              {/* Header Actions */}\n              <div className=\"flex items-center justify-between mb-6\">\n                <div className=\"flex items-center space-x-4 space-x-reverse\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute right-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      placeholder=\"البحث في المستخدمين...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pr-10 w-64\"\n                      data-testid=\"input-search-users\"\n                    />\n                  </div>\n                  <Select value={roleFilter} onValueChange={setRoleFilter}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-filter-role\">\n                      <Filter className=\"w-4 h-4 ml-2\" />\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">جميع الأدوار</SelectItem>\n                      <SelectItem value=\"admin\">مدير النظام</SelectItem>\n                      <SelectItem value=\"accountant\">محاسب</SelectItem>\n                      <SelectItem value=\"user\">مستخدم</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <Button className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-add-user\">\n                  <UserPlus className=\"w-4 h-4 ml-2\" />\n                  إضافة مستخدم جديد\n                </Button>\n              </div>\n\n              {/* Users Table */}\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full accounting-table\">\n                  <thead>\n                    <tr className=\"border-b border-gray-200\">\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">المستخدم</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">البريد الإلكتروني</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">الدور</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">الحالة</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">تاريخ الانضمام</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">العمليات</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {filteredUsers.map((user) => (\n                      <tr key={user.id} className=\"border-b border-gray-100 hover:bg-gray-50\" data-testid={`user-row-${user.id}`}>\n                        <td className=\"py-3 px-4\">\n                          <div className=\"flex items-center space-x-3 space-x-reverse\">\n                            <img\n                              src={user.profileImageUrl}\n                              alt={`${user.firstName} ${user.lastName}`}\n                              className=\"w-10 h-10 rounded-full object-cover\"\n                              data-testid={`user-avatar-${user.id}`}\n                            />\n                            <div>\n                              <p className=\"font-medium text-gray-900\" data-testid={`user-name-${user.id}`}>\n                                {user.firstName} {user.lastName}\n                              </p>\n                              {user.id === userData?.id && (\n                                <span className=\"text-xs text-blue-600\">أنت</span>\n                              )}\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"py-3 px-4 text-gray-600\" data-testid={`user-email-${user.id}`}>\n                          {user.email}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <div className=\"flex items-center space-x-2 space-x-reverse\">\n                            {getRoleIcon(user.role)}\n                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getRoleBadgeClass(user.role)}`} data-testid={`user-role-${user.id}`}>\n                              {getRoleLabel(user.role)}\n                            </span>\n                          </div>\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                            user.isActive ? 'status-active' : 'status-inactive'\n                          }`} data-testid={`user-status-${user.id}`}>\n                            {user.isActive ? 'نشط' : 'غير نشط'}\n                          </span>\n                        </td>\n                        <td className=\"py-3 px-4 text-gray-600 arabic-number\" data-testid={`user-created-${user.id}`}>\n                          {new Date(user.createdAt).toLocaleDateString('ar-SA')}\n                        </td>\n                        <td className=\"py-3 px-4\">\n                          <div className=\"flex space-x-2 space-x-reverse\">\n                            {userData?.role === 'admin' && user.id !== userData?.id && (\n                              <>\n                                <Select\n                                  value={user.role}\n                                  onValueChange={(newRole) => handleRoleChange(user.id, newRole)}\n                                >\n                                  <SelectTrigger className=\"w-32\" data-testid={`select-user-role-${user.id}`}>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"admin\">مدير النظام</SelectItem>\n                                    <SelectItem value=\"accountant\">محاسب</SelectItem>\n                                    <SelectItem value=\"user\">مستخدم</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleActivateUser(user.id, !user.isActive)}\n                                  className={user.isActive ? \"text-red-600 hover:text-red-700\" : \"text-green-600 hover:text-green-700\"}\n                                  data-testid={`button-toggle-user-${user.id}`}\n                                >\n                                  {user.isActive ? 'إلغاء التفعيل' : 'تفعيل'}\n                                </Button>\n                              </>\n                            )}\n                            {(userData?.role !== 'admin' || user.id === userData?.id) && (\n                              <span className=\"text-sm text-gray-500\">لا توجد عمليات متاحة</span>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n\n              {filteredUsers.length === 0 && (\n                <div className=\"text-center py-12 text-gray-500\" data-testid=\"empty-users\">\n                  <Users className=\"w-16 h-16 mx-auto mb-4 text-gray-300\" />\n                  <p className=\"text-lg font-medium\">لا توجد مستخدمين</p>\n                  <p className=\"text-sm mt-1\">لم يتم العثور على مستخدمين يطابقون البحث</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15611},"client/src/components/accounting/AccountForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\n\ninterface AccountFormProps {\n  onSubmit: (data: any) => void;\n  initialData?: any;\n  isLoading?: boolean;\n}\n\nexport default function AccountForm({ onSubmit, initialData, isLoading }: AccountFormProps) {\n  const [formData, setFormData] = useState({\n    code: initialData?.code || \"\",\n    name: initialData?.name || \"\",\n    nameArabic: initialData?.nameArabic || \"\",\n    type: initialData?.type || \"\",\n    subType: initialData?.subType || \"\",\n    parentId: initialData?.parentId || null,\n    isParent: initialData?.isParent || false,\n    isActive: initialData?.isActive ?? true,\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const accountTypes = [\n    { value: \"assets\", label: \"أصول\" },\n    { value: \"liabilities\", label: \"خصوم\" },\n    { value: \"equity\", label: \"حقوق الملكية\" },\n    { value: \"revenue\", label: \"إيرادات\" },\n    { value: \"expenses\", label: \"مصروفات\" },\n  ];\n\n  const subTypes = {\n    assets: [\n      { value: \"current_assets\", label: \"أصول متداولة\" },\n      { value: \"fixed_assets\", label: \"أصول ثابتة\" },\n      { value: \"intangible_assets\", label: \"أصول غير ملموسة\" },\n    ],\n    liabilities: [\n      { value: \"current_liabilities\", label: \"خصوم متداولة\" },\n      { value: \"long_term_liabilities\", label: \"خصوم طويلة الأجل\" },\n    ],\n    equity: [\n      { value: \"capital\", label: \"رأس المال\" },\n      { value: \"retained_earnings\", label: \"الأرباح المحتجزة\" },\n    ],\n    revenue: [\n      { value: \"operating_revenue\", label: \"إيرادات تشغيلية\" },\n      { value: \"other_revenue\", label: \"إيرادات أخرى\" },\n    ],\n    expenses: [\n      { value: \"operating_expenses\", label: \"مصروفات تشغيلية\" },\n      { value: \"administrative_expenses\", label: \"مصروفات إدارية\" },\n      { value: \"other_expenses\", label: \"مصروفات أخرى\" },\n    ],\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"code\">رمز الحساب *</Label>\n          <Input\n            id=\"code\"\n            value={formData.code}\n            onChange={(e) => handleInputChange(\"code\", e.target.value)}\n            placeholder=\"مثال: 1101\"\n            required\n            data-testid=\"input-account-code\"\n          />\n          <p className=\"text-xs text-gray-500 mt-1\">رمز فريد للحساب</p>\n        </div>\n\n        <div>\n          <Label htmlFor=\"name\">اسم الحساب (إنجليزي) *</Label>\n          <Input\n            id=\"name\"\n            value={formData.name}\n            onChange={(e) => handleInputChange(\"name\", e.target.value)}\n            placeholder=\"Cash in Hand\"\n            required\n            data-testid=\"input-account-name\"\n          />\n        </div>\n      </div>\n\n      <div>\n        <Label htmlFor=\"nameArabic\">اسم الحساب (عربي) *</Label>\n        <Input\n          id=\"nameArabic\"\n          value={formData.nameArabic}\n          onChange={(e) => handleInputChange(\"nameArabic\", e.target.value)}\n          placeholder=\"النقدية في الصندوق\"\n          required\n          data-testid=\"input-account-name-arabic\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"type\">نوع الحساب *</Label>\n          <Select\n            value={formData.type}\n            onValueChange={(value) => handleInputChange(\"type\", value)}\n            required\n          >\n            <SelectTrigger data-testid=\"select-account-type\">\n              <SelectValue placeholder=\"اختر نوع الحساب\" />\n            </SelectTrigger>\n            <SelectContent>\n              {accountTypes.map((type) => (\n                <SelectItem key={type.value} value={type.value}>\n                  {type.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label htmlFor=\"subType\">النوع الفرعي</Label>\n          <Select\n            value={formData.subType}\n            onValueChange={(value) => handleInputChange(\"subType\", value)}\n            disabled={!formData.type}\n          >\n            <SelectTrigger data-testid=\"select-account-subtype\">\n              <SelectValue placeholder=\"اختر النوع الفرعي\" />\n            </SelectTrigger>\n            <SelectContent>\n              {formData.type && subTypes[formData.type as keyof typeof subTypes]?.map((subType) => (\n                <SelectItem key={subType.value} value={subType.value}>\n                  {subType.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"flex items-center justify-between space-x-4 space-x-reverse\">\n        <div className=\"flex items-center space-x-2 space-x-reverse\">\n          <Switch\n            id=\"isParent\"\n            checked={formData.isParent}\n            onCheckedChange={(checked) => handleInputChange(\"isParent\", checked)}\n            data-testid=\"switch-is-parent\"\n          />\n          <Label htmlFor=\"isParent\">حساب رئيسي</Label>\n        </div>\n\n        <div className=\"flex items-center space-x-2 space-x-reverse\">\n          <Switch\n            id=\"isActive\"\n            checked={formData.isActive}\n            onCheckedChange={(checked) => handleInputChange(\"isActive\", checked)}\n            data-testid=\"switch-is-active\"\n          />\n          <Label htmlFor=\"isActive\">نشط</Label>\n        </div>\n      </div>\n\n      <div className=\"flex space-x-2 space-x-reverse pt-4\">\n        <Button\n          type=\"submit\"\n          disabled={isLoading}\n          className=\"flex-1\"\n          data-testid=\"button-submit-account\"\n        >\n          {isLoading ? \"جاري الحفظ...\" : (initialData ? \"تحديث\" : \"إضافة\")}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":6520},"client/src/components/accounting/FinancialChart.tsx":{"content":"interface FinancialChartProps {\n  data: {\n    totalRevenue: number;\n    totalExpenses: number;\n    netProfit: number;\n    totalAccounts: number;\n  };\n}\n\nexport default function FinancialChart({ data }: FinancialChartProps) {\n  return (\n    <div className=\"h-64 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center text-white\" data-testid=\"financial-chart\">\n      <div className=\"text-center\">\n        <BarChart3 className=\"w-16 h-16 mx-auto mb-4 opacity-80\" />\n        <p className=\"text-lg font-medium\">رسم بياني للإيرادات والمصروفات</p>\n        <p className=\"text-sm opacity-80 mt-2\">\n          الإيرادات: {data.totalRevenue.toLocaleString('ar-SA')} ر.س\n        </p>\n        <p className=\"text-sm opacity-80\">\n          المصروفات: {data.totalExpenses.toLocaleString('ar-SA')} ر.س\n        </p>\n        <p className=\"text-sm opacity-80\">\n          صافي الربح: {data.netProfit.toLocaleString('ar-SA')} ر.س\n        </p>\n      </div>\n    </div>\n  );\n}\n\n// Import BarChart3 from lucide-react\nimport { BarChart3 } from \"lucide-react\";\n","size_bytes":1126},"client/src/components/accounting/JournalEntryForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Plus, Trash2, Calculator } from \"lucide-react\";\n\ninterface JournalEntryFormProps {\n  accounts: any[];\n  onSubmit: (data: any) => void;\n  initialData?: any;\n  isLoading?: boolean;\n}\n\ninterface JournalEntryDetail {\n  accountId: number;\n  debit: string;\n  credit: string;\n  description: string;\n  descriptionArabic: string;\n}\n\nexport default function JournalEntryForm({ accounts, onSubmit, initialData, isLoading }: JournalEntryFormProps) {\n  const [formData, setFormData] = useState({\n    entryNumber: initialData?.entryNumber || \"\",\n    date: initialData?.date ? new Date(initialData.date).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],\n    description: initialData?.description || \"\",\n    descriptionArabic: initialData?.descriptionArabic || \"\",\n    reference: initialData?.reference || \"\",\n    companyId: 1, // For demo, using company ID 1\n  });\n\n  const [details, setDetails] = useState<JournalEntryDetail[]>(\n    initialData?.details?.map((detail: any) => ({\n      accountId: detail.accountId,\n      debit: detail.debit || \"0\",\n      credit: detail.credit || \"0\",\n      description: detail.description || \"\",\n      descriptionArabic: detail.descriptionArabic || \"\",\n    })) || [\n      {\n        accountId: 0,\n        debit: \"0\",\n        credit: \"0\",\n        description: \"\",\n        descriptionArabic: \"\",\n      },\n      {\n        accountId: 0,\n        debit: \"0\",\n        credit: \"0\",\n        description: \"\",\n        descriptionArabic: \"\",\n      },\n    ]\n  );\n\n  // Generate entry number if not provided\n  useEffect(() => {\n    if (!initialData && !formData.entryNumber) {\n      const entryNumber = `JE${Date.now().toString().slice(-6)}`;\n      setFormData(prev => ({ ...prev, entryNumber }));\n    }\n  }, [initialData, formData.entryNumber]);\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleDetailChange = (index: number, field: keyof JournalEntryDetail, value: any) => {\n    setDetails(prev => prev.map((detail, i) => \n      i === index ? { ...detail, [field]: value } : detail\n    ));\n  };\n\n  const addDetail = () => {\n    setDetails(prev => [...prev, {\n      accountId: 0,\n      debit: \"0\",\n      credit: \"0\",\n      description: \"\",\n      descriptionArabic: \"\",\n    }]);\n  };\n\n  const removeDetail = (index: number) => {\n    if (details.length > 2) {\n      setDetails(prev => prev.filter((_, i) => i !== index));\n    }\n  };\n\n  const calculateTotals = () => {\n    const totalDebit = details.reduce((sum, detail) => sum + parseFloat(detail.debit || \"0\"), 0);\n    const totalCredit = details.reduce((sum, detail) => sum + parseFloat(detail.credit || \"0\"), 0);\n    return { totalDebit, totalCredit };\n  };\n\n  const { totalDebit, totalCredit } = calculateTotals();\n  const isBalanced = Math.abs(totalDebit - totalCredit) < 0.01;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!isBalanced) {\n      return;\n    }\n\n    // Filter out empty details\n    const validDetails = details.filter(detail => \n      detail.accountId > 0 && (parseFloat(detail.debit || \"0\") > 0 || parseFloat(detail.credit || \"0\") > 0)\n    );\n\n    if (validDetails.length < 2) {\n      return;\n    }\n\n    const data = {\n      entry: formData,\n      details: validDetails.map(detail => ({\n        accountId: detail.accountId,\n        debit: parseFloat(detail.debit || \"0\").toString(),\n        credit: parseFloat(detail.credit || \"0\").toString(),\n        description: detail.description,\n        descriptionArabic: detail.descriptionArabic,\n      })),\n    };\n\n    onSubmit(data);\n  };\n\n  const getAccountName = (accountId: number) => {\n    const account = accounts.find(acc => acc.id === accountId);\n    return account ? (account.nameArabic || account.name) : \"\";\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {/* Entry Header */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"entryNumber\">رقم القيد *</Label>\n              <Input\n                id=\"entryNumber\"\n                value={formData.entryNumber}\n                onChange={(e) => handleInputChange(\"entryNumber\", e.target.value)}\n                placeholder=\"رقم القيد\"\n                required\n                data-testid=\"input-entry-number\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"date\">التاريخ *</Label>\n              <Input\n                id=\"date\"\n                type=\"date\"\n                value={formData.date}\n                onChange={(e) => handleInputChange(\"date\", e.target.value)}\n                required\n                data-testid=\"input-entry-date\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"reference\">المرجع</Label>\n              <Input\n                id=\"reference\"\n                value={formData.reference}\n                onChange={(e) => handleInputChange(\"reference\", e.target.value)}\n                placeholder=\"رقم المرجع أو الوثيقة\"\n                data-testid=\"input-entry-reference\"\n              />\n            </div>\n          </div>\n\n          <div className=\"mt-4 space-y-4\">\n            <div>\n              <Label htmlFor=\"description\">الوصف (إنجليزي) *</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => handleInputChange(\"description\", e.target.value)}\n                placeholder=\"وصف القيد المحاسبي\"\n                rows={2}\n                required\n                data-testid=\"textarea-entry-description\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"descriptionArabic\">الوصف (عربي) *</Label>\n              <Textarea\n                id=\"descriptionArabic\"\n                value={formData.descriptionArabic}\n                onChange={(e) => handleInputChange(\"descriptionArabic\", e.target.value)}\n                placeholder=\"وصف القيد المحاسبي بالعربية\"\n                rows={2}\n                required\n                data-testid=\"textarea-entry-description-arabic\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Entry Details */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold\">تفاصيل القيد</h3>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={addDetail}\n              data-testid=\"button-add-detail\"\n            >\n              <Plus className=\"w-4 h-4 ml-2\" />\n              إضافة سطر\n            </Button>\n          </div>\n\n          <div className=\"space-y-4\">\n            {details.map((detail, index) => (\n              <div key={index} className=\"grid grid-cols-1 lg:grid-cols-12 gap-3 p-4 border border-gray-200 rounded-lg\" data-testid={`detail-row-${index}`}>\n                {/* Account Selection */}\n                <div className=\"lg:col-span-4\">\n                  <Label htmlFor={`account-${index}`}>الحساب *</Label>\n                  <Select\n                    value={detail.accountId.toString()}\n                    onValueChange={(value) => handleDetailChange(index, \"accountId\", parseInt(value))}\n                    required\n                  >\n                    <SelectTrigger data-testid={`select-account-${index}`}>\n                      <SelectValue placeholder=\"اختر الحساب\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {accounts.map((account) => (\n                        <SelectItem key={account.id} value={account.id.toString()}>\n                          {account.code} - {account.nameArabic || account.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Debit Amount */}\n                <div className=\"lg:col-span-2\">\n                  <Label htmlFor={`debit-${index}`}>مدين</Label>\n                  <Input\n                    id={`debit-${index}`}\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={detail.debit}\n                    onChange={(e) => {\n                      handleDetailChange(index, \"debit\", e.target.value);\n                      // Clear credit if debit is entered\n                      if (parseFloat(e.target.value || \"0\") > 0) {\n                        handleDetailChange(index, \"credit\", \"0\");\n                      }\n                    }}\n                    placeholder=\"0.00\"\n                    className=\"text-right\"\n                    data-testid={`input-debit-${index}`}\n                  />\n                </div>\n\n                {/* Credit Amount */}\n                <div className=\"lg:col-span-2\">\n                  <Label htmlFor={`credit-${index}`}>دائن</Label>\n                  <Input\n                    id={`credit-${index}`}\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={detail.credit}\n                    onChange={(e) => {\n                      handleDetailChange(index, \"credit\", e.target.value);\n                      // Clear debit if credit is entered\n                      if (parseFloat(e.target.value || \"0\") > 0) {\n                        handleDetailChange(index, \"debit\", \"0\");\n                      }\n                    }}\n                    placeholder=\"0.00\"\n                    className=\"text-right\"\n                    data-testid={`input-credit-${index}`}\n                  />\n                </div>\n\n                {/* Description */}\n                <div className=\"lg:col-span-3\">\n                  <Label htmlFor={`desc-${index}`}>الوصف</Label>\n                  <Input\n                    id={`desc-${index}`}\n                    value={detail.descriptionArabic}\n                    onChange={(e) => handleDetailChange(index, \"descriptionArabic\", e.target.value)}\n                    placeholder=\"وصف السطر\"\n                    data-testid={`input-description-${index}`}\n                  />\n                </div>\n\n                {/* Remove Button */}\n                <div className=\"lg:col-span-1 flex items-end\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => removeDetail(index)}\n                    disabled={details.length <= 2}\n                    className=\"text-red-600 hover:text-red-700\"\n                    data-testid={`button-remove-detail-${index}`}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Totals */}\n          <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <p className=\"text-sm font-medium text-gray-600\">إجمالي المدين</p>\n                <p className=\"text-lg font-bold arabic-number amount-positive\" data-testid=\"total-debit\">\n                  {totalDebit.toLocaleString('ar-SA', { minimumFractionDigits: 2 })} ر.س\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-sm font-medium text-gray-600\">إجمالي الدائن</p>\n                <p className=\"text-lg font-bold arabic-number amount-positive\" data-testid=\"total-credit\">\n                  {totalCredit.toLocaleString('ar-SA', { minimumFractionDigits: 2 })} ر.س\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-sm font-medium text-gray-600\">الفرق</p>\n                <p className={`text-lg font-bold arabic-number ${isBalanced ? 'text-green-600' : 'text-red-600'}`} data-testid=\"balance-difference\">\n                  {Math.abs(totalDebit - totalCredit).toLocaleString('ar-SA', { minimumFractionDigits: 2 })} ر.س\n                </p>\n              </div>\n            </div>\n            \n            {!isBalanced && (\n              <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n                <div className=\"flex items-center space-x-2 space-x-reverse\">\n                  <Calculator className=\"w-5 h-5 text-red-600\" />\n                  <p className=\"text-sm text-red-800 font-medium\">\n                    تحذير: إجمالي المدين لا يساوي إجمالي الدائن. يجب أن يكون القيد متوازناً.\n                  </p>\n                </div>\n              </div>\n            )}\n            \n            {isBalanced && totalDebit > 0 && (\n              <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                <div className=\"flex items-center space-x-2 space-x-reverse\">\n                  <Calculator className=\"w-5 h-5 text-green-600\" />\n                  <p className=\"text-sm text-green-800 font-medium\">\n                    ✅ القيد متوازن ويمكن حفظه\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Submit Button */}\n      <div className=\"flex space-x-2 space-x-reverse\">\n        <Button\n          type=\"submit\"\n          disabled={isLoading || !isBalanced || totalDebit === 0}\n          className=\"flex-1\"\n          data-testid=\"button-submit-entry\"\n        >\n          {isLoading ? \"جاري الحفظ...\" : (initialData ? \"تحديث القيد\" : \"حفظ القيد\")}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":14451},"client/src/components/layout/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Calculator, BarChart3, FileText, Building2, Users, MessageSquare, Home, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nconst navigation = [\n  { name: \"لوحة التحكم\", href: \"/\", icon: Home, current: false },\n  { name: \"دليل الحسابات\", href: \"/chart-of-accounts\", icon: FileText, current: false },\n  { name: \"القيود المحاسبية\", href: \"/journal-entries\", icon: Calculator, current: false },\n  { name: \"التقارير المالية\", href: \"/financial-reports\", icon: BarChart3, current: false },\n  { name: \"إدارة الشركات\", href: \"/companies\", icon: Building2, current: false },\n  { name: \"إدارة المستخدمين\", href: \"/users\", icon: Users, current: false },\n  { name: \"بوت تيليجرام\", href: \"/telegram-bot\", icon: MessageSquare, current: false },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  \n  const userData = user || {};\n\n  return (\n    <div className=\"w-64 bg-white shadow-lg border-l border-gray-200 flex flex-col\" data-testid=\"sidebar\">\n      {/* Logo Section */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3 space-x-reverse\">\n          <div className=\"w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center\">\n            <Calculator className=\"text-white text-lg\" />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-bold text-gray-900\">نظام المحاسبة</h1>\n            <p className=\"text-sm text-gray-500\">الذكي</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 py-4\" data-testid=\"navigation-menu\">\n        <div className=\"px-4 space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href || (item.href !== \"/\" && location.startsWith(item.href));\n            return (\n              <Link key={item.name} href={item.href}>\n                <a\n                  className={`flex items-center px-4 py-3 text-gray-700 rounded-lg transition-all duration-200 hover:bg-blue-50 hover:border-r-3 hover:border-blue-600 ${\n                    isActive\n                      ? \"bg-blue-50 border-r-3 border-blue-600 text-blue-600\"\n                      : \"\"\n                  }`}\n                  data-testid={`nav-${item.href.replace(\"/\", \"\") || \"dashboard\"}`}\n                >\n                  <item.icon className=\"w-5 h-5 ml-3\" />\n                  <span className=\"font-medium\">{item.name}</span>\n                </a>\n              </Link>\n            );\n          })}\n        </div>\n      </nav>\n\n      {/* User Profile Section */}\n      <div className=\"p-4 border-t border-gray-200\" data-testid=\"user-profile\">\n        <div className=\"flex items-center space-x-3 space-x-reverse\">\n          <img\n            src={userData?.profileImageUrl || \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=100&h=100\"}\n            alt=\"صورة المستخدم\"\n            className=\"w-10 h-10 rounded-full object-cover\"\n            data-testid=\"user-avatar\"\n          />\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-gray-900\" data-testid=\"user-name\">\n              {userData?.firstName || \"مستخدم\"} {userData?.lastName || \"\"}\n            </p>\n            <p className=\"text-xs text-gray-500\" data-testid=\"user-role\">\n              {userData?.role === \"admin\" ? \"مدير النظام\" : \"مستخدم\"}\n            </p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => window.location.href = \"/api/logout\"}\n            className=\"text-gray-400 hover:text-gray-600\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4100},"client/src/components/layout/TopBar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Bell, Moon, Sun } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface TopBarProps {\n  title: string;\n  subtitle?: string;\n}\n\nexport default function TopBar({ title, subtitle }: TopBarProps) {\n  const [isDark, setIsDark] = useState(false);\n\n  const toggleTheme = () => {\n    setIsDark(!isDark);\n    document.body.classList.toggle('dark');\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4\" data-testid=\"top-bar\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\" data-testid=\"page-title\">{title}</h2>\n          {subtitle && (\n            <p className=\"text-gray-600\" data-testid=\"page-subtitle\">{subtitle}</p>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-4 space-x-reverse\">\n          {/* Theme Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleTheme}\n            className=\"p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors\"\n            data-testid=\"button-theme-toggle\"\n          >\n            {isDark ? (\n              <Sun className=\"w-4 h-4 text-gray-600\" />\n            ) : (\n              <Moon className=\"w-4 h-4 text-gray-600\" />\n            )}\n          </Button>\n          \n          {/* Notifications */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors relative\"\n            data-testid=\"button-notifications\"\n          >\n            <Bell className=\"w-4 h-4 text-gray-600\" />\n            <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center\" data-testid=\"notification-badge\">\n              3\n            </span>\n          </Button>\n          \n          {/* Current Date */}\n          <div className=\"text-sm text-gray-500\" data-testid=\"current-date\">\n            <span className=\"arabic-number\">{new Date().toLocaleDateString('ar-SA')}</span>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2199},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}